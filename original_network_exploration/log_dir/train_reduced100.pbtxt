node {
  name: "images"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 784
        }
      }
    }
  }
}
node {
  name: "labels"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "one_hot/on_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "one_hot/off_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot/depth"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "one_hot"
  op: "OneHot"
  input: "labels"
  input: "one_hot/depth"
  input: "one_hot/on_value"
  input: "one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "Normal/loc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Normal/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Normal/Identity"
  op: "Identity"
  input: "Normal/loc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Normal/Identity_1"
  op: "Identity"
  input: "Normal/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "encoder/mul"
  op: "Mul"
  input: "encoder/mul/x"
  input: "images"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/sub"
  op: "Sub"
  input: "encoder/mul"
  input: "encoder/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08238525688648224
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08238525688648224
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/max"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/mul"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Assign"
  op: "Assign"
  input: "encoder/fully_connected/weights"
  input: "encoder/fully_connected/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/read"
  op: "Identity"
  input: "encoder/fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Assign"
  op: "Assign"
  input: "encoder/fully_connected/biases"
  input: "encoder/fully_connected/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/read"
  op: "Identity"
  input: "encoder/fully_connected/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/MatMul"
  op: "MatMul"
  input: "encoder/sub"
  input: "encoder/fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "encoder/fully_connected/MatMul"
  input: "encoder/fully_connected/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/fully_connected/Relu"
  op: "Relu"
  input: "encoder/fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17320507764816284
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17320507764816284
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/max"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/mul"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Assign"
  op: "Assign"
  input: "encoder/fully_connected_1/weights"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/read"
  op: "Identity"
  input: "encoder/fully_connected_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Assign"
  op: "Assign"
  input: "encoder/fully_connected_1/biases"
  input: "encoder/fully_connected_1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/read"
  op: "Identity"
  input: "encoder/fully_connected_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/MatMul"
  op: "MatMul"
  input: "encoder/fully_connected/Relu"
  input: "encoder/fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/fully_connected_1/BiasAdd"
  op: "BiasAdd"
  input: "encoder/fully_connected_1/MatMul"
  input: "encoder/fully_connected_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/fully_connected_1/Relu"
  op: "Relu"
  input: "encoder/fully_connected_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21320071816444397
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21320071816444397
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/max"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/mul"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Assign"
  op: "Assign"
  input: "encoder/fully_connected_2/weights"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/read"
  op: "Identity"
  input: "encoder/fully_connected_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Assign"
  op: "Assign"
  input: "encoder/fully_connected_2/biases"
  input: "encoder/fully_connected_2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/read"
  op: "Identity"
  input: "encoder/fully_connected_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/MatMul"
  op: "MatMul"
  input: "encoder/fully_connected_1/Relu"
  input: "encoder/fully_connected_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/fully_connected_2/BiasAdd"
  op: "BiasAdd"
  input: "encoder/fully_connected_2/MatMul"
  input: "encoder/fully_connected_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice"
  op: "StridedSlice"
  input: "encoder/fully_connected_2/BiasAdd"
  input: "encoder/strided_slice/stack"
  input: "encoder/strided_slice/stack_1"
  input: "encoder/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_1"
  op: "StridedSlice"
  input: "encoder/fully_connected_2/BiasAdd"
  input: "encoder/strided_slice_1/stack"
  input: "encoder/strided_slice_1/stack_1"
  input: "encoder/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "encoder/sub_1"
  op: "Sub"
  input: "encoder/strided_slice_1"
  input: "encoder/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Softplus"
  op: "Softplus"
  input: "encoder/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/Identity"
  op: "Identity"
  input: "encoder/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/Identity_1"
  op: "Identity"
  input: "encoder/Softplus"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/sample_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor/Shape"
  op: "Shape"
  input: "encoder/Normal/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor/Shape_1"
  op: "Shape"
  input: "encoder/Normal/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor/BroadcastArgs"
  op: "BroadcastArgs"
  input: "encoder/Normal/batch_shape_tensor/Shape"
  input: "encoder/Normal/batch_shape_tensor/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat"
  op: "ConcatV2"
  input: "encoder/Normal/sample/concat/values_0"
  input: "encoder/Normal/batch_shape_tensor/BroadcastArgs"
  input: "encoder/Normal/sample/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "encoder/Normal/sample/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/mul"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal/RandomStandardNormal"
  input: "encoder/Normal/sample/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal"
  op: "Add"
  input: "encoder/Normal/sample/random_normal/mul"
  input: "encoder/Normal/sample/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/mul"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal"
  input: "encoder/Normal/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/add"
  op: "Add"
  input: "encoder/Normal/sample/mul"
  input: "encoder/Normal/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/Shape"
  op: "Shape"
  input: "encoder/Normal/sample/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice"
  op: "StridedSlice"
  input: "encoder/Normal/sample/Shape"
  input: "encoder/Normal/sample/strided_slice/stack"
  input: "encoder/Normal/sample/strided_slice/stack_1"
  input: "encoder/Normal/sample/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat_1"
  op: "ConcatV2"
  input: "encoder/Normal/sample/sample_shape"
  input: "encoder/Normal/sample/strided_slice"
  input: "encoder/Normal/sample/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/Reshape"
  op: "Reshape"
  input: "encoder/Normal/sample/add"
  input: "encoder/Normal/sample/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4803844690322876
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4803844690322876
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/max"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/mul"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Assign"
  op: "Assign"
  input: "decoder/fully_connected/weights"
  input: "decoder/fully_connected/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/read"
  op: "Identity"
  input: "decoder/fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Assign"
  op: "Assign"
  input: "decoder/fully_connected/biases"
  input: "decoder/fully_connected/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/read"
  op: "Identity"
  input: "decoder/fully_connected/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/MatMul"
  op: "MatMul"
  input: "encoder/Normal/sample/Reshape"
  input: "decoder/fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "decoder/fully_connected/MatMul"
  input: "decoder/fully_connected/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/Normal/sample_1/sample_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/expand_to_vector/sample_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor_1/Shape"
  op: "Shape"
  input: "encoder/Normal/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor_1/Shape_1"
  op: "Shape"
  input: "encoder/Normal/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor_1/BroadcastArgs"
  op: "BroadcastArgs"
  input: "encoder/Normal/batch_shape_tensor_1/Shape"
  input: "encoder/Normal/batch_shape_tensor_1/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat"
  op: "ConcatV2"
  input: "encoder/Normal/sample_1/concat/values_0"
  input: "encoder/Normal/batch_shape_tensor_1/BroadcastArgs"
  input: "encoder/Normal/sample_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "encoder/Normal/sample_1/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/mul"
  op: "Mul"
  input: "encoder/Normal/sample_1/random_normal/RandomStandardNormal"
  input: "encoder/Normal/sample_1/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal"
  op: "Add"
  input: "encoder/Normal/sample_1/random_normal/mul"
  input: "encoder/Normal/sample_1/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/mul"
  op: "Mul"
  input: "encoder/Normal/sample_1/random_normal"
  input: "encoder/Normal/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/add"
  op: "Add"
  input: "encoder/Normal/sample_1/mul"
  input: "encoder/Normal/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/Shape"
  op: "Shape"
  input: "encoder/Normal/sample_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice"
  op: "StridedSlice"
  input: "encoder/Normal/sample_1/Shape"
  input: "encoder/Normal/sample_1/strided_slice/stack"
  input: "encoder/Normal/sample_1/strided_slice/stack_1"
  input: "encoder/Normal/sample_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat_1"
  op: "ConcatV2"
  input: "encoder/Normal/sample_1/expand_to_vector/sample_shape"
  input: "encoder/Normal/sample_1/strided_slice"
  input: "encoder/Normal/sample_1/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/Reshape"
  op: "Reshape"
  input: "encoder/Normal/sample_1/add"
  input: "encoder/Normal/sample_1/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/axes"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/free"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Shape"
  op: "Shape"
  input: "encoder/Normal/sample_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2"
  op: "GatherV2"
  input: "decoder_1/fully_connected/Tensordot/Shape"
  input: "decoder_1/fully_connected/Tensordot/free"
  input: "decoder_1/fully_connected/Tensordot/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "decoder_1/fully_connected/Tensordot/Shape"
  input: "decoder_1/fully_connected/Tensordot/axes"
  input: "decoder_1/fully_connected/Tensordot/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Prod"
  op: "Prod"
  input: "decoder_1/fully_connected/Tensordot/GatherV2"
  input: "decoder_1/fully_connected/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Prod_1"
  op: "Prod"
  input: "decoder_1/fully_connected/Tensordot/GatherV2_1"
  input: "decoder_1/fully_connected/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat"
  op: "ConcatV2"
  input: "decoder_1/fully_connected/Tensordot/free"
  input: "decoder_1/fully_connected/Tensordot/axes"
  input: "decoder_1/fully_connected/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/stack"
  op: "Pack"
  input: "decoder_1/fully_connected/Tensordot/Prod"
  input: "decoder_1/fully_connected/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/transpose"
  op: "Transpose"
  input: "encoder/Normal/sample_1/Reshape"
  input: "decoder_1/fully_connected/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Reshape"
  op: "Reshape"
  input: "decoder_1/fully_connected/Tensordot/transpose"
  input: "decoder_1/fully_connected/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/transpose_1"
  op: "Transpose"
  input: "decoder/fully_connected/weights/read"
  input: "decoder_1/fully_connected/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Reshape_1"
  op: "Reshape"
  input: "decoder_1/fully_connected/Tensordot/transpose_1"
  input: "decoder_1/fully_connected/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/MatMul"
  op: "MatMul"
  input: "decoder_1/fully_connected/Tensordot/Reshape"
  input: "decoder_1/fully_connected/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat_1"
  op: "ConcatV2"
  input: "decoder_1/fully_connected/Tensordot/GatherV2"
  input: "decoder_1/fully_connected/Tensordot/Const_2"
  input: "decoder_1/fully_connected/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot"
  op: "Reshape"
  input: "decoder_1/fully_connected/Tensordot/MatMul"
  input: "decoder_1/fully_connected/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "decoder_1/fully_connected/Tensordot"
  input: "decoder/fully_connected/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/labels_stop_gradient"
  op: "StopGradient"
  input: "one_hot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "decoder/fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape_1"
  op: "Shape"
  input: "decoder/fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank_1"
  input: "softmax_cross_entropy_loss/xentropy/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice/begin"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape_1"
  input: "softmax_cross_entropy_loss/xentropy/Slice/begin"
  input: "softmax_cross_entropy_loss/xentropy/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat"
  op: "ConcatV2"
  input: "softmax_cross_entropy_loss/xentropy/concat/values_0"
  input: "softmax_cross_entropy_loss/xentropy/Slice"
  input: "softmax_cross_entropy_loss/xentropy/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape"
  op: "Reshape"
  input: "decoder/fully_connected/BiasAdd"
  input: "softmax_cross_entropy_loss/xentropy/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape_2"
  op: "Shape"
  input: "softmax_cross_entropy_loss/labels_stop_gradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_1"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank_2"
  input: "softmax_cross_entropy_loss/xentropy/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1/begin"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape_2"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1/begin"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1"
  op: "ConcatV2"
  input: "softmax_cross_entropy_loss/xentropy/concat_1/values_0"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1"
  input: "softmax_cross_entropy_loss/xentropy/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape_1"
  op: "Reshape"
  input: "softmax_cross_entropy_loss/labels_stop_gradient"
  input: "softmax_cross_entropy_loss/xentropy/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "softmax_cross_entropy_loss/xentropy/Reshape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_2"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank"
  input: "softmax_cross_entropy_loss/xentropy/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2/size"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2/begin"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  op: "Reshape"
  input: "softmax_cross_entropy_loss/xentropy"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "softmax_cross_entropy_loss/ToFloat/x"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  input: "softmax_cross_entropy_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Const"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Sum"
  op: "Sum"
  input: "softmax_cross_entropy_loss/Mul"
  input: "softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Equal/y"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Equal"
  op: "Equal"
  input: "softmax_cross_entropy_loss/ToFloat/x"
  input: "softmax_cross_entropy_loss/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/zeros_like"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like/Shape"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like/Const"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like"
  op: "Fill"
  input: "softmax_cross_entropy_loss/num_present/ones_like/Shape"
  input: "softmax_cross_entropy_loss/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Select"
  op: "Select"
  input: "softmax_cross_entropy_loss/num_present/Equal"
  input: "softmax_cross_entropy_loss/num_present/zeros_like"
  input: "softmax_cross_entropy_loss/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  input: "^softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  input: "^softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights"
  op: "Mul"
  input: "softmax_cross_entropy_loss/num_present/Select"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Const"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present"
  op: "Sum"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights"
  input: "softmax_cross_entropy_loss/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Const_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Sum_1"
  op: "Sum"
  input: "softmax_cross_entropy_loss/Sum"
  input: "softmax_cross_entropy_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/value"
  op: "DivNoNan"
  input: "softmax_cross_entropy_loss/Sum_1"
  input: "softmax_cross_entropy_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6931471824645996
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "softmax_cross_entropy_loss/value"
  input: "truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Square"
  op: "Square"
  input: "encoder/Normal/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Square_1"
  op: "Square"
  input: "Normal/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/truediv"
  op: "RealDiv"
  input: "KullbackLeibler/kl_normal_normal/Square"
  input: "KullbackLeibler/kl_normal_normal/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/sub"
  op: "Sub"
  input: "encoder/Normal/Identity"
  input: "Normal/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Square_2"
  op: "Square"
  input: "KullbackLeibler/kl_normal_normal/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/mul"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/Const_1"
  input: "KullbackLeibler/kl_normal_normal/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/truediv_1"
  op: "RealDiv"
  input: "KullbackLeibler/kl_normal_normal/Square_2"
  input: "KullbackLeibler/kl_normal_normal/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/sub_1"
  op: "Sub"
  input: "KullbackLeibler/kl_normal_normal/truediv"
  input: "KullbackLeibler/kl_normal_normal/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Log"
  op: "Log"
  input: "KullbackLeibler/kl_normal_normal/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/sub_2"
  op: "Sub"
  input: "KullbackLeibler/kl_normal_normal/sub_1"
  input: "KullbackLeibler/kl_normal_normal/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/mul_1"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/Const_2"
  input: "KullbackLeibler/kl_normal_normal/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/add"
  op: "Add"
  input: "KullbackLeibler/kl_normal_normal/truediv_1"
  input: "KullbackLeibler/kl_normal_normal/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "KullbackLeibler/kl_normal_normal/add"
  input: "Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "Mean"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6931471824645996
      }
    }
  }
}
node {
  name: "truediv_1"
  op: "RealDiv"
  input: "Sum"
  input: "truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "mul/x"
  input: "truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "truediv"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "decoder/fully_connected/BiasAdd"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "ArgMax"
  input: "labels"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "Cast"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Softmax"
  op: "Softmax"
  input: "decoder_1/fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Mean_2/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_2"
  op: "Mean"
  input: "Softmax"
  input: "Mean_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_1"
  op: "ArgMax"
  input: "Mean_2"
  input: "ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal_1"
  op: "Equal"
  input: "ArgMax_1"
  input: "labels"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "Equal_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_3"
  op: "Mean"
  input: "Cast_1"
  input: "Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.321928024291992
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "sub/x"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "ExponentialDecay/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1200
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "ExponentialDecay/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9700000286102295
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2"
  input: "ExponentialDecay/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Floor"
  op: "Floor"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x"
  input: "ExponentialDecay/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "IsVariableInitialized"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/read"
  op: "Identity"
  input: "cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected/weights"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "cond/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected/weights/Initializer/random_uniform"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/Switch_1"
  input: "cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected/weights"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected/weights/Initializer/random_uniform"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_encoder/fully_connected/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read_encoder/fully_connected/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_encoder/fully_connected/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_encoder/fully_connected/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond/Switch_1"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read_encoder/fully_connected/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_encoder/fully_connected/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_1/Switch"
  op: "Switch"
  input: "IsVariableInitialized_1"
  input: "IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/switch_t"
  op: "Identity"
  input: "cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/switch_f"
  op: "Identity"
  input: "cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/read"
  op: "Identity"
  input: "cond_1/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_1/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected/biases"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "cond_1/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected/biases/Initializer/zeros"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "cond_1/Merge"
  op: "Merge"
  input: "cond_1/Switch_1"
  input: "cond_1/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected/biases"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected/biases/Initializer/zeros"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read/Switch_encoder/fully_connected/biases/ExponentialMovingAverage_0"
  op: "Switch"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read_encoder/fully_connected/biases/ExponentialMovingAverage_0"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read/Switch_encoder/fully_connected/biases/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/Merge_encoder/fully_connected/biases/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_1/Switch_1"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read_encoder/fully_connected/biases/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/Merge_encoder/fully_connected/biases/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/read"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/Switch"
  op: "Switch"
  input: "IsVariableInitialized_2"
  input: "IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/switch_t"
  op: "Identity"
  input: "cond_2/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/switch_f"
  op: "Identity"
  input: "cond_2/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/read"
  op: "Identity"
  input: "cond_2/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/weights"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "cond_2/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "cond_2/Merge"
  op: "Merge"
  input: "cond_2/Switch_1"
  input: "cond_2/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/weights"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read/Switch_encoder/fully_connected_1/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read_encoder/fully_connected_1/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read/Switch_encoder/fully_connected_1/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/Merge_encoder/fully_connected_1/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_2/Switch_1"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read_encoder/fully_connected_1/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/Merge_encoder/fully_connected_1/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_3/Switch"
  op: "Switch"
  input: "IsVariableInitialized_3"
  input: "IsVariableInitialized_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/switch_t"
  op: "Identity"
  input: "cond_3/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/switch_f"
  op: "Identity"
  input: "cond_3/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/read"
  op: "Identity"
  input: "cond_3/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_3/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/biases"
  input: "cond_3/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "cond_3/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/Initializer/zeros"
  input: "cond_3/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "cond_3/Merge"
  op: "Merge"
  input: "cond_3/Switch_1"
  input: "cond_3/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/biases"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/Initializer/zeros"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_1"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read/Switch_encoder/fully_connected_1/biases/ExponentialMovingAverage_0"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Merge"
  input: "cond_3/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read_encoder/fully_connected_1/biases/ExponentialMovingAverage_0"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read/Switch_encoder/fully_connected_1/biases/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/Merge_encoder/fully_connected_1/biases/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_3/Switch_1"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read_encoder/fully_connected_1/biases/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/Merge_encoder/fully_connected_1/biases/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/read"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_4/Switch"
  op: "Switch"
  input: "IsVariableInitialized_4"
  input: "IsVariableInitialized_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/switch_t"
  op: "Identity"
  input: "cond_4/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/switch_f"
  op: "Identity"
  input: "cond_4/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/read"
  op: "Identity"
  input: "cond_4/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_4/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/weights"
  input: "cond_4/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "cond_4/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform"
  input: "cond_4/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "cond_4/Merge"
  op: "Merge"
  input: "cond_4/Switch_1"
  input: "cond_4/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/weights"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read/Switch_encoder/fully_connected_2/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_4/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read_encoder/fully_connected_2/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read/Switch_encoder/fully_connected_2/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/Merge_encoder/fully_connected_2/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_4/Switch_1"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read_encoder/fully_connected_2/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/Merge_encoder/fully_connected_2/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_5/Switch"
  op: "Switch"
  input: "IsVariableInitialized_5"
  input: "IsVariableInitialized_5"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/switch_t"
  op: "Identity"
  input: "cond_5/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/switch_f"
  op: "Identity"
  input: "cond_5/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_5"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/read"
  op: "Identity"
  input: "cond_5/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_5/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/biases"
  input: "cond_5/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "cond_5/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/Initializer/zeros"
  input: "cond_5/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "cond_5/Merge"
  op: "Merge"
  input: "cond_5/Switch_1"
  input: "cond_5/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/biases"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/Initializer/zeros"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_1"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read/Switch_encoder/fully_connected_2/biases/ExponentialMovingAverage_0"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Merge"
  input: "cond_5/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read_encoder/fully_connected_2/biases/ExponentialMovingAverage_0"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read/Switch_encoder/fully_connected_2/biases/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/Merge_encoder/fully_connected_2/biases/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_5/Switch_1"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read_encoder/fully_connected_2/biases/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/Merge_encoder/fully_connected_2/biases/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/read"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_6/Switch"
  op: "Switch"
  input: "IsVariableInitialized_6"
  input: "IsVariableInitialized_6"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/switch_t"
  op: "Identity"
  input: "cond_6/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/switch_f"
  op: "Identity"
  input: "cond_6/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_6"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/read"
  op: "Identity"
  input: "cond_6/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_6/read/Switch"
  op: "RefSwitch"
  input: "decoder/fully_connected/weights"
  input: "cond_6/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "cond_6/Switch_1"
  op: "Switch"
  input: "decoder/fully_connected/weights/Initializer/random_uniform"
  input: "cond_6/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "cond_6/Merge"
  op: "Merge"
  input: "cond_6/Switch_1"
  input: "cond_6/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "decoder/fully_connected/weights"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "decoder/fully_connected/weights/Initializer/random_uniform"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read/Switch_decoder/fully_connected/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_6/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read_decoder/fully_connected/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read/Switch_decoder/fully_connected/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/Merge_decoder/fully_connected/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_6/Switch_1"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read_decoder/fully_connected/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/Merge_decoder/fully_connected/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_7/Switch"
  op: "Switch"
  input: "IsVariableInitialized_7"
  input: "IsVariableInitialized_7"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/switch_t"
  op: "Identity"
  input: "cond_7/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/switch_f"
  op: "Identity"
  input: "cond_7/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_7"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/read"
  op: "Identity"
  input: "cond_7/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_7/read/Switch"
  op: "RefSwitch"
  input: "decoder/fully_connected/biases"
  input: "cond_7/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "cond_7/Switch_1"
  op: "Switch"
  input: "decoder/fully_connected/biases/Initializer/zeros"
  input: "cond_7/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "cond_7/Merge"
  op: "Merge"
  input: "cond_7/Switch_1"
  input: "cond_7/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "decoder/fully_connected/biases"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "decoder/fully_connected/biases/Initializer/zeros"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read/Switch_decoder/fully_connected/biases/ExponentialMovingAverage_0"
  op: "Switch"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge"
  input: "cond_7/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read_decoder/fully_connected/biases/ExponentialMovingAverage_0"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read/Switch_decoder/fully_connected/biases/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/Merge_decoder/fully_connected/biases/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_7/Switch_1"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read_decoder/fully_connected/biases/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/Merge_decoder/fully_connected/biases/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/read"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/read"
  input: "encoder/fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg"
  op: "AssignSub"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/read"
  input: "encoder/fully_connected/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1"
  op: "AssignSub"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
  op: "Sub"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/read"
  input: "encoder/fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2"
  op: "AssignSub"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1"
  op: "Sub"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/read"
  input: "encoder/fully_connected_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3"
  op: "AssignSub"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub_1"
  op: "Sub"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/read"
  input: "encoder/fully_connected_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4"
  op: "AssignSub"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub_1"
  op: "Sub"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/read"
  input: "encoder/fully_connected_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5"
  op: "AssignSub"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub_1"
  op: "Sub"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/read"
  input: "decoder/fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6"
  op: "AssignSub"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub_1"
  op: "Sub"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/read"
  input: "decoder/fully_connected/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7"
  op: "AssignSub"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage"
  op: "NoOp"
  input: "^ExponentialMovingAverage/AssignMovingAvg"
  input: "^ExponentialMovingAverage/AssignMovingAvg_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_2"
  input: "^ExponentialMovingAverage/AssignMovingAvg_3"
  input: "^ExponentialMovingAverage/AssignMovingAvg_4"
  input: "^ExponentialMovingAverage/AssignMovingAvg_5"
  input: "^ExponentialMovingAverage/AssignMovingAvg_6"
  input: "^ExponentialMovingAverage/AssignMovingAvg_7"
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: "decoder/fully_connected/biases"
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "decoder/fully_connected/biases"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage"
  input: "decoder/fully_connected/weights"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage"
  input: "encoder/fully_connected/biases"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage"
  input: "encoder/fully_connected/weights"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage"
  input: "encoder/fully_connected_1/biases"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
  input: "encoder/fully_connected_1/weights"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
  input: "encoder/fully_connected_2/biases"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
  input: "encoder/fully_connected_2/weights"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: "decoder/fully_connected/biases"
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "decoder/fully_connected/biases"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "decoder/fully_connected/weights"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "encoder/fully_connected/biases"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "encoder/fully_connected/weights"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "encoder/fully_connected_1/biases"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "encoder/fully_connected_1/weights"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "encoder/fully_connected_2/biases"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "encoder/fully_connected_2/weights"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save_1/filename/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save_1/filename"
  op: "PlaceholderWithDefault"
  input: "save_1/filename/input"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save_1/Const"
  op: "PlaceholderWithDefault"
  input: "save_1/filename"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save_1/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save_1/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/SaveV2"
  op: "SaveV2"
  input: "save_1/Const"
  input: "save_1/SaveV2/tensor_names"
  input: "save_1/SaveV2/shape_and_slices"
  input: "decoder/fully_connected/biases"
  input: "decoder/fully_connected/weights"
  input: "encoder/fully_connected/biases"
  input: "encoder/fully_connected/weights"
  input: "encoder/fully_connected_1/biases"
  input: "encoder/fully_connected_1/weights"
  input: "encoder/fully_connected_2/biases"
  input: "encoder/fully_connected_2/weights"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save_1/control_dependency"
  op: "Identity"
  input: "save_1/Const"
  input: "^save_1/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save_1/Const"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2"
  op: "RestoreV2"
  input: "save_1/Const"
  input: "save_1/RestoreV2/tensor_names"
  input: "save_1/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save_1/Assign"
  op: "Assign"
  input: "decoder/fully_connected/biases"
  input: "save_1/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_1"
  op: "Assign"
  input: "decoder/fully_connected/weights"
  input: "save_1/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected/biases"
  input: "save_1/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_3"
  op: "Assign"
  input: "encoder/fully_connected/weights"
  input: "save_1/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_4"
  op: "Assign"
  input: "encoder/fully_connected_1/biases"
  input: "save_1/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_5"
  op: "Assign"
  input: "encoder/fully_connected_1/weights"
  input: "save_1/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_6"
  op: "Assign"
  input: "encoder/fully_connected_2/biases"
  input: "save_1/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_7"
  op: "Assign"
  input: "encoder/fully_connected_2/weights"
  input: "save_1/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_8"
  op: "Assign"
  input: "global_step"
  input: "save_1/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/restore_all"
  op: "NoOp"
  input: "^save_1/Assign"
  input: "^save_1/Assign_1"
  input: "^save_1/Assign_2"
  input: "^save_1/Assign_3"
  input: "^save_1/Assign_4"
  input: "^save_1/Assign_5"
  input: "^save_1/Assign_6"
  input: "^save_1/Assign_7"
  input: "^save_1/Assign_8"
}
node {
  name: "update_barrier"
  op: "NoOp"
  input: "^ExponentialMovingAverage"
}
node {
  name: "control_dependency"
  op: "Identity"
  input: "add"
  input: "^update_barrier"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add"
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Fill"
}
node {
  name: "gradients/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_grad/Shape"
  input: "gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/add_grad/tuple/control_dependency"
  input: "truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_grad/RealDiv"
  input: "gradients/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum"
  input: "gradients/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/Neg"
  op: "Neg"
  input: "softmax_cross_entropy_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/truediv_grad/Neg"
  input: "truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/truediv_grad/RealDiv_1"
  input: "truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/mul"
  op: "Mul"
  input: "gradients/add_grad/tuple/control_dependency"
  input: "gradients/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_grad/mul"
  input: "gradients/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum_1"
  input: "gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/truediv_grad/Reshape"
  input: "^gradients/truediv_grad/Reshape_1"
}
node {
  name: "gradients/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/truediv_grad/Reshape"
  input: "^gradients/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/truediv_grad/Reshape_1"
  input: "^gradients/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul"
  op: "Mul"
  input: "gradients/add_grad/tuple/control_dependency_1"
  input: "truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/add_grad/tuple/control_dependency_1"
  input: "mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_grad/Mul"
  input: "^gradients/mul_grad/Mul_1"
}
node {
  name: "gradients/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_grad/Mul"
  input: "^gradients/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_grad/Mul_1"
  input: "^gradients/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "gradients/truediv_grad/tuple/control_dependency"
  input: "softmax_cross_entropy_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Sum"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan"
  input: "gradients/softmax_cross_entropy_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Sum"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Neg"
  op: "Neg"
  input: "softmax_cross_entropy_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Neg"
  input: "softmax_cross_entropy_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_1"
  input: "softmax_cross_entropy_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/mul"
  op: "Mul"
  input: "gradients/truediv_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Sum_1"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/value_grad/mul"
  input: "gradients/softmax_cross_entropy_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Sum_1"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/Reshape"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/Reshape_1"
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Reshape"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/value_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Reshape_1"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/value_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_1_grad/Shape"
  input: "gradients/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_1_grad/RealDiv"
  input: "gradients/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_1_grad/Sum"
  input: "gradients/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Neg"
  op: "Neg"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/truediv_1_grad/Neg"
  input: "truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/truediv_1_grad/RealDiv_1"
  input: "truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/mul"
  op: "Mul"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "gradients/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_1_grad/mul"
  input: "gradients/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/truediv_1_grad/Sum_1"
  input: "gradients/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/truediv_1_grad/Reshape"
  input: "^gradients/truediv_1_grad/Reshape_1"
}
node {
  name: "gradients/truediv_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/truediv_1_grad/Reshape"
  input: "^gradients/truediv_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/truediv_1_grad/Reshape_1"
  input: "^gradients/truediv_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_1_grad/tuple/control_dependency"
  input: "gradients/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_grad/Reshape"
  input: "gradients/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Tile"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/add"
  op: "Add"
  input: "Mean/reduction_indices"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/mod"
  op: "FloorMod"
  input: "gradients/Mean_grad/add"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range"
  op: "Range"
  input: "gradients/Mean_grad/range/start"
  input: "gradients/Mean_grad/Size"
  input: "gradients/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill"
  op: "Fill"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Mean_grad/range"
  input: "gradients/Mean_grad/mod"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/DynamicStitch"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Sum_grad/Tile"
  input: "gradients/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_3"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile"
  input: "softmax_cross_entropy_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/Mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_1"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum"
  op: "Sum"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Shape"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency"
  input: "KullbackLeibler/kl_normal_normal/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Neg"
  op: "Neg"
  input: "KullbackLeibler/kl_normal_normal/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Neg"
  input: "KullbackLeibler/kl_normal_normal/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_1"
  input: "KullbackLeibler/kl_normal_normal/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_1"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_1"
  input: "KullbackLeibler/kl_normal_normal/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul_1"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/Const_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "softmax_cross_entropy_loss/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims"
  input: "softmax_cross_entropy_loss/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/LogSoftmax"
  op: "LogSoftmax"
  input: "softmax_cross_entropy_loss/xentropy/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/Neg"
  op: "Neg"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/LogSoftmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/mul"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1"
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Const"
  op: "Const"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/sub"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_1"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Neg"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Shape"
  op: "Shape"
  input: "decoder/fully_connected/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape"
  op: "Shape"
  input: "encoder/Normal/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Neg"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Neg"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "KullbackLeibler/kl_normal_normal/truediv"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/mul"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape"
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape"
  input: "^gradients/decoder/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/decoder/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/AddN"
  input: "KullbackLeibler/kl_normal_normal/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Neg"
  op: "Neg"
  input: "KullbackLeibler/kl_normal_normal/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Neg"
  input: "KullbackLeibler/kl_normal_normal/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_1"
  input: "KullbackLeibler/kl_normal_normal/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/mul"
  op: "Mul"
  input: "gradients/AddN"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "decoder/fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "encoder/Normal/sample/Reshape"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/decoder/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/decoder/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/decoder/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/decoder/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/decoder/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/decoder/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Const"
  op: "Const"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul"
  op: "Mul"
  input: "encoder/Normal/Identity_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/Reshape_grad/Shape"
  op: "Shape"
  input: "encoder/Normal/sample/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency"
  input: "gradients/encoder/Normal/sample/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Shape"
  op: "Shape"
  input: "encoder/Normal/sample/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Shape_1"
  op: "Shape"
  input: "encoder/Normal/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/Normal/sample/add_grad/Shape"
  input: "gradients/encoder/Normal/sample/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Sum"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/Reshape_grad/Reshape"
  input: "gradients/encoder/Normal/sample/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/add_grad/Sum"
  input: "gradients/encoder/Normal/sample/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/Reshape_grad/Reshape"
  input: "gradients/encoder/Normal/sample/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/add_grad/Sum_1"
  input: "gradients/encoder/Normal/sample/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/Normal/sample/add_grad/Reshape"
  input: "^gradients/encoder/Normal/sample/add_grad/Reshape_1"
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/add_grad/Reshape"
  input: "^gradients/encoder/Normal/sample/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/add_grad/Reshape_1"
  input: "^gradients/encoder/Normal/sample/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Shape"
  op: "Shape"
  input: "encoder/Normal/sample/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Shape_1"
  op: "Shape"
  input: "encoder/Normal/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Mul"
  op: "Mul"
  input: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency"
  input: "encoder/Normal/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Sum"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/mul_grad/Mul"
  input: "gradients/encoder/Normal/sample/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/mul_grad/Sum"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Mul_1"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal"
  input: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/mul_grad/Mul_1"
  input: "gradients/encoder/Normal/sample/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/mul_grad/Sum_1"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/Normal/sample/mul_grad/Reshape"
  input: "^gradients/encoder/Normal/sample/mul_grad/Reshape_1"
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/mul_grad/Reshape"
  input: "^gradients/encoder/Normal/sample/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/mul_grad/Reshape_1"
  input: "^gradients/encoder/Normal/sample/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/control_dependency"
  input: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_1"
  input: "gradients/encoder/Normal/sample/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_grad/Shape"
  op: "Shape"
  input: "encoder/fully_connected_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/encoder/strided_slice_grad/Shape"
  input: "encoder/strided_slice/stack"
  input: "encoder/strided_slice/stack_1"
  input: "encoder/strided_slice/stack_2"
  input: "gradients/AddN_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/encoder/Softplus_grad/SoftplusGrad"
  op: "SoftplusGrad"
  input: "gradients/AddN_2"
  input: "encoder/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Shape"
  op: "Shape"
  input: "encoder/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/sub_1_grad/Shape"
  input: "gradients/encoder/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Sum"
  op: "Sum"
  input: "gradients/encoder/Softplus_grad/SoftplusGrad"
  input: "gradients/encoder/sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/encoder/sub_1_grad/Sum"
  input: "gradients/encoder/sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/encoder/Softplus_grad/SoftplusGrad"
  input: "gradients/encoder/sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Neg"
  op: "Neg"
  input: "gradients/encoder/sub_1_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/encoder/sub_1_grad/Neg"
  input: "gradients/encoder/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/sub_1_grad/Reshape"
  input: "^gradients/encoder/sub_1_grad/Reshape_1"
}
node {
  name: "gradients/encoder/sub_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/sub_1_grad/Reshape"
  input: "^gradients/encoder/sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sub_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/sub_1_grad/Reshape_1"
  input: "^gradients/encoder/sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sub_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_1_grad/Shape"
  op: "Shape"
  input: "encoder/fully_connected_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/encoder/strided_slice_1_grad/Shape"
  input: "encoder/strided_slice_1/stack"
  input: "encoder/strided_slice_1/stack_1"
  input: "encoder/strided_slice_1/stack_2"
  input: "gradients/encoder/sub_1_grad/tuple/control_dependency"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/encoder/strided_slice_grad/StridedSliceGrad"
  input: "gradients/encoder/strided_slice_1_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/strided_slice_grad/StridedSliceGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_3"
  input: "^gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_3"
  input: "^gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/strided_slice_grad/StridedSliceGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency"
  input: "encoder/fully_connected_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "encoder/fully_connected_1/Relu"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/MatMul"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_2/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency"
  input: "encoder/fully_connected_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder/fully_connected_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/fully_connected_1/Relu_grad/ReluGrad"
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/Relu_grad/ReluGrad"
  input: "^gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  input: "encoder/fully_connected_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "encoder/fully_connected/Relu"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency"
  input: "encoder/fully_connected/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/encoder/fully_connected/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/fully_connected/Relu_grad/ReluGrad"
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/fully_connected/Relu_grad/ReluGrad"
  input: "^gradients/encoder/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/encoder/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "encoder/fully_connected/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "encoder/sub"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/encoder/fully_connected/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/encoder/fully_connected/MatMul_grad/MatMul"
  input: "^gradients/encoder/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected/MatMul_grad/MatMul_1"
  input: "^gradients/encoder/fully_connected/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/fully_connected/weights/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/fully_connected/weights/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "encoder/fully_connected/weights/Adam"
  input: "encoder/fully_connected/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/read"
  op: "Identity"
  input: "encoder/fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "encoder/fully_connected/weights/Adam_1"
  input: "encoder/fully_connected/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "encoder/fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam/Assign"
  op: "Assign"
  input: "encoder/fully_connected/biases/Adam"
  input: "encoder/fully_connected/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam/read"
  op: "Identity"
  input: "encoder/fully_connected/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1/Assign"
  op: "Assign"
  input: "encoder/fully_connected/biases/Adam_1"
  input: "encoder/fully_connected/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1/read"
  op: "Identity"
  input: "encoder/fully_connected/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Assign"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/Adam"
  input: "encoder/fully_connected_1/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/read"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Assign"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/Adam_1"
  input: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/read"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam/Assign"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/Adam"
  input: "encoder/fully_connected_1/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam/read"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1/Assign"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/Adam_1"
  input: "encoder/fully_connected_1/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1/read"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Initializer/zeros"
  op: "Fill"
  input: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/shape_as_tensor"
  input: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Assign"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/Adam"
  input: "encoder/fully_connected_2/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/read"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Assign"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/Adam_1"
  input: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/read"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam/Assign"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/Adam"
  input: "encoder/fully_connected_2/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam/read"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1/Assign"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/Adam_1"
  input: "encoder/fully_connected_2/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1/read"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "decoder/fully_connected/weights/Adam"
  input: "decoder/fully_connected/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam/read"
  op: "Identity"
  input: "decoder/fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "decoder/fully_connected/weights/Adam_1"
  input: "decoder/fully_connected/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "decoder/fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam/Assign"
  op: "Assign"
  input: "decoder/fully_connected/biases/Adam"
  input: "decoder/fully_connected/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam/read"
  op: "Identity"
  input: "decoder/fully_connected/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1/Assign"
  op: "Assign"
  input: "decoder/fully_connected/biases/Adam_1"
  input: "decoder/fully_connected/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1/read"
  op: "Identity"
  input: "decoder/fully_connected/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/fully_connected/weights"
  input: "encoder/fully_connected/weights/Adam"
  input: "encoder/fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/fully_connected/biases"
  input: "encoder/fully_connected/biases/Adam"
  input: "encoder/fully_connected/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/fully_connected_1/weights"
  input: "encoder/fully_connected_1/weights/Adam"
  input: "encoder/fully_connected_1/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_1/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/fully_connected_1/biases"
  input: "encoder/fully_connected_1/biases/Adam"
  input: "encoder/fully_connected_1/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_2/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/fully_connected_2/weights"
  input: "encoder/fully_connected_2/weights/Adam"
  input: "encoder/fully_connected_2/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_2/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/fully_connected_2/biases"
  input: "encoder/fully_connected_2/biases/Adam"
  input: "encoder/fully_connected_2/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/fully_connected/weights"
  input: "decoder/fully_connected/weights/Adam"
  input: "decoder/fully_connected/weights/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/fully_connected/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/fully_connected/biases"
  input: "decoder/fully_connected/biases/Adam"
  input: "decoder/fully_connected/biases/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_decoder/fully_connected/biases/ApplyAdam"
  input: "^Adam/update_decoder/fully_connected/weights/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected/biases/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected/weights/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_1/biases/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_1/weights/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_2/biases/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_2/weights/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_decoder/fully_connected/biases/ApplyAdam"
  input: "^Adam/update_decoder/fully_connected/weights/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected/biases/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected/weights/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_1/biases/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_1/weights/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_2/biases/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_2/weights/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_decoder/fully_connected/biases/ApplyAdam"
  input: "^Adam/update_decoder/fully_connected/weights/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected/biases/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected/weights/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_1/biases/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_1/weights/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_2/biases/ApplyAdam"
  input: "^Adam/update_encoder/fully_connected_2/weights/ApplyAdam"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/CheckNumerics"
  op: "CheckNumerics"
  input: "control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "LossTensor is inf or nan"
    }
  }
}
node {
  name: "train_op/control_dependency"
  op: "Identity"
  input: "train_op/CheckNumerics"
  input: "^Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/CheckNumerics"
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^decoder/fully_connected/biases/Adam/Assign"
  input: "^decoder/fully_connected/biases/Adam_1/Assign"
  input: "^decoder/fully_connected/biases/Assign"
  input: "^decoder/fully_connected/biases/ExponentialMovingAverage/Assign"
  input: "^decoder/fully_connected/weights/Adam/Assign"
  input: "^decoder/fully_connected/weights/Adam_1/Assign"
  input: "^decoder/fully_connected/weights/Assign"
  input: "^decoder/fully_connected/weights/ExponentialMovingAverage/Assign"
  input: "^encoder/fully_connected/biases/Adam/Assign"
  input: "^encoder/fully_connected/biases/Adam_1/Assign"
  input: "^encoder/fully_connected/biases/Assign"
  input: "^encoder/fully_connected/biases/ExponentialMovingAverage/Assign"
  input: "^encoder/fully_connected/weights/Adam/Assign"
  input: "^encoder/fully_connected/weights/Adam_1/Assign"
  input: "^encoder/fully_connected/weights/Assign"
  input: "^encoder/fully_connected/weights/ExponentialMovingAverage/Assign"
  input: "^encoder/fully_connected_1/biases/Adam/Assign"
  input: "^encoder/fully_connected_1/biases/Adam_1/Assign"
  input: "^encoder/fully_connected_1/biases/Assign"
  input: "^encoder/fully_connected_1/biases/ExponentialMovingAverage/Assign"
  input: "^encoder/fully_connected_1/weights/Adam/Assign"
  input: "^encoder/fully_connected_1/weights/Adam_1/Assign"
  input: "^encoder/fully_connected_1/weights/Assign"
  input: "^encoder/fully_connected_1/weights/ExponentialMovingAverage/Assign"
  input: "^encoder/fully_connected_2/biases/Adam/Assign"
  input: "^encoder/fully_connected_2/biases/Adam_1/Assign"
  input: "^encoder/fully_connected_2/biases/Assign"
  input: "^encoder/fully_connected_2/biases/ExponentialMovingAverage/Assign"
  input: "^encoder/fully_connected_2/weights/Adam/Assign"
  input: "^encoder/fully_connected_2/weights/Adam_1/Assign"
  input: "^encoder/fully_connected_2/weights/Assign"
  input: "^encoder/fully_connected_2/weights/ExponentialMovingAverage/Assign"
  input: "^global_step/Assign"
}
node {
  name: "images_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 784
        }
      }
    }
  }
}
node {
  name: "labels_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "one_hot/on_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "one_hot/off_value_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot/depth_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "one_hot_1"
  op: "OneHot"
  input: "labels_1"
  input: "one_hot/depth_1"
  input: "one_hot/on_value_1"
  input: "one_hot/off_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "Normal/loc_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Normal/scale_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Normal/Identity_2"
  op: "Identity"
  input: "Normal/loc_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Normal/Identity_1_1"
  op: "Identity"
  input: "Normal/scale_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "encoder/mul_1"
  op: "Mul"
  input: "encoder/mul/x_1"
  input: "images_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/sub/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/sub_2"
  op: "Sub"
  input: "encoder/mul_1"
  input: "encoder/sub/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/min_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08238525688648224
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/max_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08238525688648224
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/RandomUniform_1"
  op: "RandomUniform"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/sub_1"
  op: "Sub"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/max_1"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/mul_1"
  op: "Mul"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/RandomUniform_1"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform_1"
  op: "Add"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/mul_1"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected/weights_1"
  input: "encoder/fully_connected/weights/Initializer/random_uniform_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/read_1"
  op: "Identity"
  input: "encoder/fully_connected/weights_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected/biases_1"
  input: "encoder/fully_connected/biases/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/read_1"
  op: "Identity"
  input: "encoder/fully_connected/biases_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/MatMul_1"
  op: "MatMul"
  input: "encoder/sub_2"
  input: "encoder/fully_connected/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/fully_connected/BiasAdd_1"
  op: "BiasAdd"
  input: "encoder/fully_connected/MatMul_1"
  input: "encoder/fully_connected/biases/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/fully_connected/Relu_1"
  op: "Relu"
  input: "encoder/fully_connected/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/min_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17320507764816284
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/max_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17320507764816284
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/RandomUniform_1"
  op: "RandomUniform"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/sub_1"
  op: "Sub"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/max_1"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/mul_1"
  op: "Mul"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/RandomUniform_1"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform_1"
  op: "Add"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/mul_1"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_1/weights_1"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/read_1"
  op: "Identity"
  input: "encoder/fully_connected_1/weights_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_1/biases_1"
  input: "encoder/fully_connected_1/biases/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/read_1"
  op: "Identity"
  input: "encoder/fully_connected_1/biases_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/MatMul_1"
  op: "MatMul"
  input: "encoder/fully_connected/Relu_1"
  input: "encoder/fully_connected_1/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/fully_connected_1/BiasAdd_1"
  op: "BiasAdd"
  input: "encoder/fully_connected_1/MatMul_1"
  input: "encoder/fully_connected_1/biases/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/fully_connected_1/Relu_1"
  op: "Relu"
  input: "encoder/fully_connected_1/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/min_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21320071816444397
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/max_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21320071816444397
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/RandomUniform_1"
  op: "RandomUniform"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/sub_1"
  op: "Sub"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/max_1"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/mul_1"
  op: "Mul"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/RandomUniform_1"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform_1"
  op: "Add"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/mul_1"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_2/weights_1"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/read_1"
  op: "Identity"
  input: "encoder/fully_connected_2/weights_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_2/biases_1"
  input: "encoder/fully_connected_2/biases/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/read_1"
  op: "Identity"
  input: "encoder/fully_connected_2/biases_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/MatMul_1"
  op: "MatMul"
  input: "encoder/fully_connected_1/Relu_1"
  input: "encoder/fully_connected_2/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/fully_connected_2/BiasAdd_1"
  op: "BiasAdd"
  input: "encoder/fully_connected_2/MatMul_1"
  input: "encoder/fully_connected_2/biases/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/strided_slice/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_2"
  op: "StridedSlice"
  input: "encoder/fully_connected_2/BiasAdd_1"
  input: "encoder/strided_slice/stack_3"
  input: "encoder/strided_slice/stack_1_1"
  input: "encoder/strided_slice/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/strided_slice_1/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_1/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_1/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_1_1"
  op: "StridedSlice"
  input: "encoder/fully_connected_2/BiasAdd_1"
  input: "encoder/strided_slice_1/stack_3"
  input: "encoder/strided_slice_1/stack_1_1"
  input: "encoder/strided_slice_1/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/sub_1/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "encoder/sub_1_1"
  op: "Sub"
  input: "encoder/strided_slice_1_1"
  input: "encoder/sub_1/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Softplus_1"
  op: "Softplus"
  input: "encoder/sub_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/Identity_2"
  op: "Identity"
  input: "encoder/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/Identity_1_1"
  op: "Identity"
  input: "encoder/Softplus_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/sample_shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor/Shape_2"
  op: "Shape"
  input: "encoder/Normal/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor/Shape_1_1"
  op: "Shape"
  input: "encoder/Normal/Identity_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor/BroadcastArgs_1"
  op: "BroadcastArgs"
  input: "encoder/Normal/batch_shape_tensor/Shape_2"
  input: "encoder/Normal/batch_shape_tensor/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/concat/values_0_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat_2"
  op: "ConcatV2"
  input: "encoder/Normal/sample/concat/values_0_1"
  input: "encoder/Normal/batch_shape_tensor/BroadcastArgs_1"
  input: "encoder/Normal/sample/concat/axis_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/mean_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/stddev_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/RandomStandardNormal_1"
  op: "RandomStandardNormal"
  input: "encoder/Normal/sample/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/mul_1"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal/RandomStandardNormal_1"
  input: "encoder/Normal/sample/random_normal/stddev_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal_1"
  op: "Add"
  input: "encoder/Normal/sample/random_normal/mul_1"
  input: "encoder/Normal/sample/random_normal/mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/mul_1"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal_1"
  input: "encoder/Normal/Identity_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/add_1"
  op: "Add"
  input: "encoder/Normal/sample/mul_1"
  input: "encoder/Normal/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/Shape_1"
  op: "Shape"
  input: "encoder/Normal/sample/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice_1"
  op: "StridedSlice"
  input: "encoder/Normal/sample/Shape_1"
  input: "encoder/Normal/sample/strided_slice/stack_3"
  input: "encoder/Normal/sample/strided_slice/stack_1_1"
  input: "encoder/Normal/sample/strided_slice/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample/concat_1/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat_1_1"
  op: "ConcatV2"
  input: "encoder/Normal/sample/sample_shape_1"
  input: "encoder/Normal/sample/strided_slice_1"
  input: "encoder/Normal/sample/concat_1/axis_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/Reshape_1"
  op: "Reshape"
  input: "encoder/Normal/sample/add_1"
  input: "encoder/Normal/sample/concat_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/min_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4803844690322876
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/max_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4803844690322876
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/RandomUniform_1"
  op: "RandomUniform"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/sub_1"
  op: "Sub"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/max_1"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/mul_1"
  op: "Mul"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/RandomUniform_1"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform_1"
  op: "Add"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/mul_1"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/min_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Assign_1"
  op: "Assign"
  input: "decoder/fully_connected/weights_1"
  input: "decoder/fully_connected/weights/Initializer/random_uniform_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/read_1"
  op: "Identity"
  input: "decoder/fully_connected/weights_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Assign_1"
  op: "Assign"
  input: "decoder/fully_connected/biases_1"
  input: "decoder/fully_connected/biases/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/read_1"
  op: "Identity"
  input: "decoder/fully_connected/biases_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/MatMul_1"
  op: "MatMul"
  input: "encoder/Normal/sample/Reshape_1"
  input: "decoder/fully_connected/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/fully_connected/BiasAdd_1"
  op: "BiasAdd"
  input: "decoder/fully_connected/MatMul_1"
  input: "decoder/fully_connected/biases/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/Normal/sample_1/sample_shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/expand_to_vector/sample_shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor_1/Shape_2"
  op: "Shape"
  input: "encoder/Normal/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor_1/Shape_1_1"
  op: "Shape"
  input: "encoder/Normal/Identity_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor_1/BroadcastArgs_1"
  op: "BroadcastArgs"
  input: "encoder/Normal/batch_shape_tensor_1/Shape_2"
  input: "encoder/Normal/batch_shape_tensor_1/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat/values_0_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat_2"
  op: "ConcatV2"
  input: "encoder/Normal/sample_1/concat/values_0_1"
  input: "encoder/Normal/batch_shape_tensor_1/BroadcastArgs_1"
  input: "encoder/Normal/sample_1/concat/axis_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/mean_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/stddev_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/RandomStandardNormal_1"
  op: "RandomStandardNormal"
  input: "encoder/Normal/sample_1/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/mul_1"
  op: "Mul"
  input: "encoder/Normal/sample_1/random_normal/RandomStandardNormal_1"
  input: "encoder/Normal/sample_1/random_normal/stddev_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal_1"
  op: "Add"
  input: "encoder/Normal/sample_1/random_normal/mul_1"
  input: "encoder/Normal/sample_1/random_normal/mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/mul_1"
  op: "Mul"
  input: "encoder/Normal/sample_1/random_normal_1"
  input: "encoder/Normal/Identity_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/add_1"
  op: "Add"
  input: "encoder/Normal/sample_1/mul_1"
  input: "encoder/Normal/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/Shape_1"
  op: "Shape"
  input: "encoder/Normal/sample_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice/stack_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice/stack_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice_1"
  op: "StridedSlice"
  input: "encoder/Normal/sample_1/Shape_1"
  input: "encoder/Normal/sample_1/strided_slice/stack_3"
  input: "encoder/Normal/sample_1/strided_slice/stack_1_1"
  input: "encoder/Normal/sample_1/strided_slice/stack_2_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat_1/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat_1_1"
  op: "ConcatV2"
  input: "encoder/Normal/sample_1/expand_to_vector/sample_shape_1"
  input: "encoder/Normal/sample_1/strided_slice_1"
  input: "encoder/Normal/sample_1/concat_1/axis_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/Reshape_1"
  op: "Reshape"
  input: "encoder/Normal/sample_1/add_1"
  input: "encoder/Normal/sample_1/concat_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/axes_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/free_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Shape_1"
  op: "Shape"
  input: "encoder/Normal/sample_1/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2_2"
  op: "GatherV2"
  input: "decoder_1/fully_connected/Tensordot/Shape_1"
  input: "decoder_1/fully_connected/Tensordot/free_1"
  input: "decoder_1/fully_connected/Tensordot/GatherV2/axis_1"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2_1/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2_1_1"
  op: "GatherV2"
  input: "decoder_1/fully_connected/Tensordot/Shape_1"
  input: "decoder_1/fully_connected/Tensordot/axes_1"
  input: "decoder_1/fully_connected/Tensordot/GatherV2_1/axis_1"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Prod_2"
  op: "Prod"
  input: "decoder_1/fully_connected/Tensordot/GatherV2_2"
  input: "decoder_1/fully_connected/Tensordot/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Const_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Prod_1_1"
  op: "Prod"
  input: "decoder_1/fully_connected/Tensordot/GatherV2_1_1"
  input: "decoder_1/fully_connected/Tensordot/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat_2"
  op: "ConcatV2"
  input: "decoder_1/fully_connected/Tensordot/free_1"
  input: "decoder_1/fully_connected/Tensordot/axes_1"
  input: "decoder_1/fully_connected/Tensordot/concat/axis_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/stack_1"
  op: "Pack"
  input: "decoder_1/fully_connected/Tensordot/Prod_2"
  input: "decoder_1/fully_connected/Tensordot/Prod_1_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/transpose_2"
  op: "Transpose"
  input: "encoder/Normal/sample_1/Reshape_1"
  input: "decoder_1/fully_connected/Tensordot/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Reshape_2"
  op: "Reshape"
  input: "decoder_1/fully_connected/Tensordot/transpose_2"
  input: "decoder_1/fully_connected/Tensordot/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/transpose_1/perm_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/transpose_1_1"
  op: "Transpose"
  input: "decoder/fully_connected/weights/read_1"
  input: "decoder_1/fully_connected/Tensordot/transpose_1/perm_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Reshape_1/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Reshape_1_1"
  op: "Reshape"
  input: "decoder_1/fully_connected/Tensordot/transpose_1_1"
  input: "decoder_1/fully_connected/Tensordot/Reshape_1/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/MatMul_1"
  op: "MatMul"
  input: "decoder_1/fully_connected/Tensordot/Reshape_2"
  input: "decoder_1/fully_connected/Tensordot/Reshape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Const_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat_1/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat_1_1"
  op: "ConcatV2"
  input: "decoder_1/fully_connected/Tensordot/GatherV2_2"
  input: "decoder_1/fully_connected/Tensordot/Const_2_1"
  input: "decoder_1/fully_connected/Tensordot/concat_1/axis_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot_1"
  op: "Reshape"
  input: "decoder_1/fully_connected/Tensordot/MatMul_1"
  input: "decoder_1/fully_connected/Tensordot/concat_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/BiasAdd_1"
  op: "BiasAdd"
  input: "decoder_1/fully_connected/Tensordot_1"
  input: "decoder/fully_connected/biases/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/labels_stop_gradient_1"
  op: "StopGradient"
  input: "one_hot_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape_3"
  op: "Shape"
  input: "decoder/fully_connected/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape_1_1"
  op: "Shape"
  input: "decoder/fully_connected/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_3"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank_1_1"
  input: "softmax_cross_entropy_loss/xentropy/Sub/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice/begin_1"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub_3"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice/size_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_3"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape_1_1"
  input: "softmax_cross_entropy_loss/xentropy/Slice/begin_1"
  input: "softmax_cross_entropy_loss/xentropy/Slice/size_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat/values_0_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_2"
  op: "ConcatV2"
  input: "softmax_cross_entropy_loss/xentropy/concat/values_0_1"
  input: "softmax_cross_entropy_loss/xentropy/Slice_3"
  input: "softmax_cross_entropy_loss/xentropy/concat/axis_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape_3"
  op: "Reshape"
  input: "decoder/fully_connected/BiasAdd_1"
  input: "softmax_cross_entropy_loss/xentropy/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape_2_1"
  op: "Shape"
  input: "softmax_cross_entropy_loss/labels_stop_gradient_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_1/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_1_1"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank_2_1"
  input: "softmax_cross_entropy_loss/xentropy/Sub_1/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1/begin_1"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub_1_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1/size_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1_1"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape_2_1"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1/begin_1"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1/size_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1/values_0_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1/axis_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1_1"
  op: "ConcatV2"
  input: "softmax_cross_entropy_loss/xentropy/concat_1/values_0_1"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1_1"
  input: "softmax_cross_entropy_loss/xentropy/concat_1/axis_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape_1_1"
  op: "Reshape"
  input: "softmax_cross_entropy_loss/labels_stop_gradient_1"
  input: "softmax_cross_entropy_loss/xentropy/concat_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy_1"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_3"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_2/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_2_1"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank_3"
  input: "softmax_cross_entropy_loss/xentropy/Sub_2/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2/begin_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2/size_1"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub_2_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2_1"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape_3"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2/begin_1"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2/size_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape_2_1"
  op: "Reshape"
  input: "softmax_cross_entropy_loss/xentropy_1"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights/rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/values/shape_1"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/values/rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  op: "NoOp"
}
node {
  name: "softmax_cross_entropy_loss/ToFloat/x_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Mul_1"
  op: "Mul"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_1"
  input: "softmax_cross_entropy_loss/ToFloat/x_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Const_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Sum_2"
  op: "Sum"
  input: "softmax_cross_entropy_loss/Mul_1"
  input: "softmax_cross_entropy_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Equal/y_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Equal_1"
  op: "Equal"
  input: "softmax_cross_entropy_loss/ToFloat/x_1"
  input: "softmax_cross_entropy_loss/num_present/Equal/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/zeros_like_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like/Shape_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like/Const_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like_1"
  op: "Fill"
  input: "softmax_cross_entropy_loss/num_present/ones_like/Shape_1"
  input: "softmax_cross_entropy_loss/num_present/ones_like/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Select_1"
  op: "Select"
  input: "softmax_cross_entropy_loss/num_present/Equal_1"
  input: "softmax_cross_entropy_loss/num_present/zeros_like_1"
  input: "softmax_cross_entropy_loss/num_present/ones_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/shape_1"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_1"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/rank_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success_1"
  op: "NoOp"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape_1"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_1"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  input: "^softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  input: "^softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like_1"
  op: "Fill"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape_1"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights_1"
  op: "Mul"
  input: "softmax_cross_entropy_loss/num_present/Select_1"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Const_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present_1"
  op: "Sum"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights_1"
  input: "softmax_cross_entropy_loss/num_present/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Const_1_1"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Sum_1_1"
  op: "Sum"
  input: "softmax_cross_entropy_loss/Sum_2"
  input: "softmax_cross_entropy_loss/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/value_1"
  op: "DivNoNan"
  input: "softmax_cross_entropy_loss/Sum_1_1"
  input: "softmax_cross_entropy_loss/num_present_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6931471824645996
      }
    }
  }
}
node {
  name: "truediv_2"
  op: "RealDiv"
  input: "softmax_cross_entropy_loss/value_1"
  input: "truediv/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Const_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Const_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Square_3"
  op: "Square"
  input: "encoder/Normal/Identity_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Square_1_1"
  op: "Square"
  input: "Normal/Identity_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/truediv_2"
  op: "RealDiv"
  input: "KullbackLeibler/kl_normal_normal/Square_3"
  input: "KullbackLeibler/kl_normal_normal/Square_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/sub_3"
  op: "Sub"
  input: "encoder/Normal/Identity_2"
  input: "Normal/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Square_2_1"
  op: "Square"
  input: "KullbackLeibler/kl_normal_normal/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/mul_2"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/Const_1_1"
  input: "KullbackLeibler/kl_normal_normal/Square_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/truediv_1_1"
  op: "RealDiv"
  input: "KullbackLeibler/kl_normal_normal/Square_2_1"
  input: "KullbackLeibler/kl_normal_normal/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/sub_1_1"
  op: "Sub"
  input: "KullbackLeibler/kl_normal_normal/truediv_2"
  input: "KullbackLeibler/kl_normal_normal/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Log_1"
  op: "Log"
  input: "KullbackLeibler/kl_normal_normal/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/sub_2_1"
  op: "Sub"
  input: "KullbackLeibler/kl_normal_normal/sub_1_1"
  input: "KullbackLeibler/kl_normal_normal/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/mul_1_1"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/Const_2_1"
  input: "KullbackLeibler/kl_normal_normal/sub_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/add_1"
  op: "Add"
  input: "KullbackLeibler/kl_normal_normal/truediv_1_1"
  input: "KullbackLeibler/kl_normal_normal/mul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Mean/reduction_indices_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_4"
  op: "Mean"
  input: "KullbackLeibler/kl_normal_normal/add_1"
  input: "Mean/reduction_indices_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "Mean_4"
  input: "Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "truediv_1/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6931471824645996
      }
    }
  }
}
node {
  name: "truediv_1_1"
  op: "RealDiv"
  input: "Sum_1"
  input: "truediv_1/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "mul/x_1"
  input: "truediv_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_1"
  op: "Add"
  input: "truediv_2"
  input: "mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ArgMax/dimension_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_2"
  op: "ArgMax"
  input: "decoder/fully_connected/BiasAdd_1"
  input: "ArgMax/dimension_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal_2"
  op: "Equal"
  input: "ArgMax_2"
  input: "labels_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Cast_2"
  op: "Cast"
  input: "Equal_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Const_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_1_1"
  op: "Mean"
  input: "Cast_2"
  input: "Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Softmax_1"
  op: "Softmax"
  input: "decoder_1/fully_connected/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Mean_2/reduction_indices_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_2_1"
  op: "Mean"
  input: "Softmax_1"
  input: "Mean_2/reduction_indices_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ArgMax_1/dimension_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_1_1"
  op: "ArgMax"
  input: "Mean_2_1"
  input: "ArgMax_1/dimension_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal_1_1"
  op: "Equal"
  input: "ArgMax_1_1"
  input: "labels_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Cast_1_1"
  op: "Cast"
  input: "Equal_1_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Const_2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_3_1"
  op: "Mean"
  input: "Cast_1_1"
  input: "Const_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sub/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.321928024291992
      }
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "sub/x_1"
  input: "truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_step/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign_1"
  op: "Assign"
  input: "global_step_1"
  input: "global_step/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read_1"
  op: "Identity"
  input: "global_step_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_1"
      }
    }
  }
}
node {
  name: "ExponentialDecay/learning_rate_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1200
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_3"
  op: "Cast"
  input: "ExponentialDecay/Cast/x_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9700000286102295
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2_1"
  op: "Cast"
  input: "global_step/read_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialDecay/truediv_1"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2_1"
  input: "ExponentialDecay/Cast_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Floor_1"
  op: "Floor"
  input: "ExponentialDecay/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Pow_1"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x_1"
  input: "ExponentialDecay/Floor_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay_1"
  op: "Mul"
  input: "ExponentialDecay/learning_rate_1"
  input: "ExponentialDecay/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/weights_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond/Switch_2"
  op: "Switch"
  input: "IsVariableInitialized_8"
  input: "IsVariableInitialized_8"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_t_1"
  op: "Identity"
  input: "cond/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_f_1"
  op: "Identity"
  input: "cond/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/pred_id_1"
  op: "Identity"
  input: "IsVariableInitialized_8"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected/weights_1"
  input: "cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "cond/read_1"
  op: "Identity"
  input: "cond/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected/weights/Initializer/random_uniform_1"
  input: "cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "cond/Merge_1"
  op: "Merge"
  input: "cond/Switch_1_1"
  input: "cond/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/weights_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_2"
  op: "Switch"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_t_1"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_f_1"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_1"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected/weights_1"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read_1"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected/weights/Initializer/random_uniform_1"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_1"
  op: "Merge"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1_1"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_encoder/fully_connected/weights/ExponentialMovingAverage_0_1"
  op: "Switch"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_1"
  input: "cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read_encoder/fully_connected/weights/ExponentialMovingAverage_0_1"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_encoder/fully_connected/weights/ExponentialMovingAverage_0_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_encoder/fully_connected/weights/ExponentialMovingAverage_0_1"
  op: "Merge"
  input: "cond/Switch_1_1"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read_encoder/fully_connected/weights/ExponentialMovingAverage_0_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage_1"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_encoder/fully_connected/weights/ExponentialMovingAverage_0_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/read_1"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_1_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/biases_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_1/Switch_2"
  op: "Switch"
  input: "IsVariableInitialized_1_1"
  input: "IsVariableInitialized_1_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/switch_t_1"
  op: "Identity"
  input: "cond_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/switch_f_1"
  op: "Identity"
  input: "cond_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/pred_id_1"
  op: "Identity"
  input: "IsVariableInitialized_1_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected/biases_1"
  input: "cond_1/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "cond_1/read_1"
  op: "Identity"
  input: "cond_1/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_1/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected/biases/Initializer/zeros_1"
  input: "cond_1/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "cond_1/Merge_1"
  op: "Merge"
  input: "cond_1/Switch_1_1"
  input: "cond_1/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/biases_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_2"
  op: "Switch"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_t_1"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_f_1"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_1"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected/biases_1"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read_1"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected/biases/Initializer/zeros_1"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge_1"
  op: "Merge"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1_1"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read/Switch_encoder/fully_connected/biases/ExponentialMovingAverage_0_1"
  op: "Switch"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge_1"
  input: "cond_1/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read_encoder/fully_connected/biases/ExponentialMovingAverage_0_1"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read/Switch_encoder/fully_connected/biases/ExponentialMovingAverage_0_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/Merge_encoder/fully_connected/biases/ExponentialMovingAverage_0_1"
  op: "Merge"
  input: "cond_1/Switch_1_1"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read_encoder/fully_connected/biases/ExponentialMovingAverage_0_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage_1"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/Merge_encoder/fully_connected/biases/ExponentialMovingAverage_0_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/read_1"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_2_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/weights_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/Switch_2"
  op: "Switch"
  input: "IsVariableInitialized_2_1"
  input: "IsVariableInitialized_2_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/switch_t_1"
  op: "Identity"
  input: "cond_2/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/switch_f_1"
  op: "Identity"
  input: "cond_2/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/pred_id_1"
  op: "Identity"
  input: "IsVariableInitialized_2_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/weights_1"
  input: "cond_2/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "cond_2/read_1"
  op: "Identity"
  input: "cond_2/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform_1"
  input: "cond_2/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "cond_2/Merge_1"
  op: "Merge"
  input: "cond_2/Switch_1_1"
  input: "cond_2/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/weights_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_2"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/switch_t_1"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/switch_f_1"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/pred_id_1"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/weights_1"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read_1"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform_1"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Merge_1"
  op: "Merge"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_1_1"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read/Switch_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_1"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Merge_1"
  input: "cond_2/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_1"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read/Switch_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/Merge_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_1"
  op: "Merge"
  input: "cond_2/Switch_1_1"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage_1"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/Merge_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/read_1"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_3_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/biases_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_3/Switch_2"
  op: "Switch"
  input: "IsVariableInitialized_3_1"
  input: "IsVariableInitialized_3_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/switch_t_1"
  op: "Identity"
  input: "cond_3/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/switch_f_1"
  op: "Identity"
  input: "cond_3/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/pred_id_1"
  op: "Identity"
  input: "IsVariableInitialized_3_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/biases_1"
  input: "cond_3/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "cond_3/read_1"
  op: "Identity"
  input: "cond_3/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_3/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/Initializer/zeros_1"
  input: "cond_3/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "cond_3/Merge_1"
  op: "Merge"
  input: "cond_3/Switch_1_1"
  input: "cond_3/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/biases_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_2"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/switch_t_1"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/switch_f_1"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/pred_id_1"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/biases_1"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read_1"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/Initializer/zeros_1"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Merge_1"
  op: "Merge"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_1_1"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read/Switch_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_1"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Merge_1"
  input: "cond_3/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_1"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read/Switch_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/Merge_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_1"
  op: "Merge"
  input: "cond_3/Switch_1_1"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage_1"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/Merge_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/read_1"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_4_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/weights_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_4/Switch_2"
  op: "Switch"
  input: "IsVariableInitialized_4_1"
  input: "IsVariableInitialized_4_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/switch_t_1"
  op: "Identity"
  input: "cond_4/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/switch_f_1"
  op: "Identity"
  input: "cond_4/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/pred_id_1"
  op: "Identity"
  input: "IsVariableInitialized_4_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/weights_1"
  input: "cond_4/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "cond_4/read_1"
  op: "Identity"
  input: "cond_4/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_4/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform_1"
  input: "cond_4/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "cond_4/Merge_1"
  op: "Merge"
  input: "cond_4/Switch_1_1"
  input: "cond_4/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/weights_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_2"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/switch_t_1"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/switch_f_1"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/pred_id_1"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/weights_1"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read_1"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform_1"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Merge_1"
  op: "Merge"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_1_1"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read/Switch_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_1"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Merge_1"
  input: "cond_4/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_1"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read/Switch_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/Merge_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_1"
  op: "Merge"
  input: "cond_4/Switch_1_1"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage_1"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/Merge_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/read_1"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_5_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/biases_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_5/Switch_2"
  op: "Switch"
  input: "IsVariableInitialized_5_1"
  input: "IsVariableInitialized_5_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/switch_t_1"
  op: "Identity"
  input: "cond_5/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/switch_f_1"
  op: "Identity"
  input: "cond_5/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/pred_id_1"
  op: "Identity"
  input: "IsVariableInitialized_5_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/biases_1"
  input: "cond_5/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "cond_5/read_1"
  op: "Identity"
  input: "cond_5/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_5/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/Initializer/zeros_1"
  input: "cond_5/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "cond_5/Merge_1"
  op: "Merge"
  input: "cond_5/Switch_1_1"
  input: "cond_5/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/biases_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_2"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/switch_t_1"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/switch_f_1"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/pred_id_1"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read/Switch_1"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/biases_1"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read_1"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_1_1"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/Initializer/zeros_1"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Merge_1"
  op: "Merge"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_1_1"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read/Switch_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_1"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Merge_1"
  input: "cond_5/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_1"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read/Switch_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/Merge_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_1"
  op: "Merge"
  input: "cond_5/Switch_1_1"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage_1"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/Merge_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/read_1"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_6_1"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/weights_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_6/Switch_2"
  op: "Switch"
  input: "IsVariableInitialized_6_1"
  input: "IsVariableInitialized_6_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/switch_t_1"
  op: "Identity"
  input: "cond_6/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/switch_f_1"
  op: "Identity"
  input: "cond_6/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/pred_id_1"
  op: "Identity"
  input: "IsVariableInitialized_6_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/read/Switch_1"
  op: "RefSwitch"
  input: "decoder/fully_connected/weights_1"
  input: "cond_6/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "cond_6/read_1"
  op: "Identity"
  input: "cond_6/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_6/Switch_1_1"
  op: "Switch"
  input: "decoder/fully_connected/weights/Initializer/random_uniform_1"
  input: "cond_6/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "cond_6/Merge_1"
  op: "Merge"
  input: "cond_6/Switch_1_1"
  input: "cond_6/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/weights_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_2"
  op: "Switch"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_t_1"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_f_1"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_1"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_1"
  op: "RefSwitch"
  input: "decoder/fully_connected/weights_1"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read_1"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1_1"
  op: "Switch"
  input: "decoder/fully_connected/weights/Initializer/random_uniform_1"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_1"
  op: "Merge"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1_1"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read/Switch_decoder/fully_connected/weights/ExponentialMovingAverage_0_1"
  op: "Switch"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_1"
  input: "cond_6/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read_decoder/fully_connected/weights/ExponentialMovingAverage_0_1"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read/Switch_decoder/fully_connected/weights/ExponentialMovingAverage_0_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/Merge_decoder/fully_connected/weights/ExponentialMovingAverage_0_1"
  op: "Merge"
  input: "cond_6/Switch_1_1"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read_decoder/fully_connected/weights/ExponentialMovingAverage_0_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/Assign_1"
  op: "Assign"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage_1"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/Merge_decoder/fully_connected/weights/ExponentialMovingAverage_0_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/read_1"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_7_1"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/biases_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_7/Switch_2"
  op: "Switch"
  input: "IsVariableInitialized_7_1"
  input: "IsVariableInitialized_7_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/switch_t_1"
  op: "Identity"
  input: "cond_7/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/switch_f_1"
  op: "Identity"
  input: "cond_7/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/pred_id_1"
  op: "Identity"
  input: "IsVariableInitialized_7_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/read/Switch_1"
  op: "RefSwitch"
  input: "decoder/fully_connected/biases_1"
  input: "cond_7/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "cond_7/read_1"
  op: "Identity"
  input: "cond_7/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_7/Switch_1_1"
  op: "Switch"
  input: "decoder/fully_connected/biases/Initializer/zeros_1"
  input: "cond_7/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "cond_7/Merge_1"
  op: "Merge"
  input: "cond_7/Switch_1_1"
  input: "cond_7/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/biases_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_2"
  op: "Switch"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_t_1"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_f_1"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_1"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch_1"
  op: "RefSwitch"
  input: "decoder/fully_connected/biases_1"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read_1"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1_1"
  op: "Switch"
  input: "decoder/fully_connected/biases/Initializer/zeros_1"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge_1"
  op: "Merge"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1_1"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read/Switch_decoder/fully_connected/biases/ExponentialMovingAverage_0_1"
  op: "Switch"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge_1"
  input: "cond_7/pred_id_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read_decoder/fully_connected/biases/ExponentialMovingAverage_0_1"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read/Switch_decoder/fully_connected/biases/ExponentialMovingAverage_0_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/Merge_decoder/fully_connected/biases/ExponentialMovingAverage_0_1"
  op: "Merge"
  input: "cond_7/Switch_1_1"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read_decoder/fully_connected/biases/ExponentialMovingAverage_0_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/Assign_1"
  op: "Assign"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage_1"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/Merge_decoder/fully_connected/biases/ExponentialMovingAverage_0_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/read_1"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/decay_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub/x_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub_2"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub/x_1"
  input: "ExponentialMovingAverage/decay_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub_1_1"
  op: "Sub"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/read_1"
  input: "encoder/fully_connected/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/mul_1"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub_1_1"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8"
  op: "AssignSub"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage_1"
  input: "ExponentialMovingAverage/AssignMovingAvg/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub_2"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x_1"
  input: "ExponentialMovingAverage/decay_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1_1"
  op: "Sub"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/read_1"
  input: "encoder/fully_connected/biases/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/mul_1"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1_1"
  op: "AssignSub"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub_2"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x_1"
  input: "ExponentialMovingAverage/decay_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1_1"
  op: "Sub"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/read_1"
  input: "encoder/fully_connected_1/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/mul_1"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2_1"
  op: "AssignSub"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub_2"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x_1"
  input: "ExponentialMovingAverage/decay_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1_1"
  op: "Sub"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/read_1"
  input: "encoder/fully_connected_1/biases/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/mul_1"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3_1"
  op: "AssignSub"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub/x_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub_2"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub/x_1"
  input: "ExponentialMovingAverage/decay_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub_1_1"
  op: "Sub"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/read_1"
  input: "encoder/fully_connected_2/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/mul_1"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub_1_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4_1"
  op: "AssignSub"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub/x_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub_2"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub/x_1"
  input: "ExponentialMovingAverage/decay_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub_1_1"
  op: "Sub"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/read_1"
  input: "encoder/fully_connected_2/biases/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/mul_1"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub_1_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5_1"
  op: "AssignSub"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub/x_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub_2"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub/x_1"
  input: "ExponentialMovingAverage/decay_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub_1_1"
  op: "Sub"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/read_1"
  input: "decoder/fully_connected/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/mul_1"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub_1_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6_1"
  op: "AssignSub"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub/x_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub_2"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub/x_1"
  input: "ExponentialMovingAverage/decay_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub_1_1"
  op: "Sub"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/read_1"
  input: "decoder/fully_connected/biases/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/mul_1"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub_1_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7_1"
  op: "AssignSub"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage_1"
  op: "NoOp"
  input: "^ExponentialMovingAverage/AssignMovingAvg_1_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_2_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_3_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_4_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_5_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_6_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_7_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_8"
}
node {
  name: "save/filename/input_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename_1"
  op: "PlaceholderWithDefault"
  input: "save/filename/input_1"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const_1"
  op: "PlaceholderWithDefault"
  input: "save/filename_1"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: "decoder/fully_connected/biases"
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2_1"
  op: "SaveV2"
  input: "save/Const_1"
  input: "save/SaveV2/tensor_names_1"
  input: "save/SaveV2/shape_and_slices_1"
  input: "decoder/fully_connected/biases_1"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage_1"
  input: "decoder/fully_connected/weights_1"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage_1"
  input: "encoder/fully_connected/biases_1"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage_1"
  input: "encoder/fully_connected/weights_1"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage_1"
  input: "encoder/fully_connected_1/biases_1"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage_1"
  input: "encoder/fully_connected_1/weights_1"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage_1"
  input: "encoder/fully_connected_2/biases_1"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage_1"
  input: "encoder/fully_connected_2/weights_1"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage_1"
  input: "global_step_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency_1"
  op: "Identity"
  input: "save/Const_1"
  input: "^save/SaveV2_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: "decoder/fully_connected/biases"
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const_1"
  input: "save/RestoreV2/tensor_names_1"
  input: "save/RestoreV2/shape_and_slices_1"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "decoder/fully_connected/biases_1"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1_1"
  op: "Assign"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage_1"
  input: "save/RestoreV2_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2_1"
  op: "Assign"
  input: "decoder/fully_connected/weights_1"
  input: "save/RestoreV2_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3_1"
  op: "Assign"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage_1"
  input: "save/RestoreV2_1:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4_1"
  op: "Assign"
  input: "encoder/fully_connected/biases_1"
  input: "save/RestoreV2_1:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5_1"
  op: "Assign"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage_1"
  input: "save/RestoreV2_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6_1"
  op: "Assign"
  input: "encoder/fully_connected/weights_1"
  input: "save/RestoreV2_1:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7_1"
  op: "Assign"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage_1"
  input: "save/RestoreV2_1:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8_1"
  op: "Assign"
  input: "encoder/fully_connected_1/biases_1"
  input: "save/RestoreV2_1:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9_1"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage_1"
  input: "save/RestoreV2_1:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10_1"
  op: "Assign"
  input: "encoder/fully_connected_1/weights_1"
  input: "save/RestoreV2_1:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11_1"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage_1"
  input: "save/RestoreV2_1:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12_1"
  op: "Assign"
  input: "encoder/fully_connected_2/biases_1"
  input: "save/RestoreV2_1:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13_1"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage_1"
  input: "save/RestoreV2_1:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14_1"
  op: "Assign"
  input: "encoder/fully_connected_2/weights_1"
  input: "save/RestoreV2_1:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15_1"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage_1"
  input: "save/RestoreV2_1:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16_1"
  op: "Assign"
  input: "global_step_1"
  input: "save/RestoreV2_1:16"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all_1"
  op: "NoOp"
  input: "^save/Assign_10_1"
  input: "^save/Assign_11_1"
  input: "^save/Assign_12_1"
  input: "^save/Assign_13_1"
  input: "^save/Assign_14_1"
  input: "^save/Assign_15_1"
  input: "^save/Assign_16_1"
  input: "^save/Assign_17"
  input: "^save/Assign_1_1"
  input: "^save/Assign_2_1"
  input: "^save/Assign_3_1"
  input: "^save/Assign_4_1"
  input: "^save/Assign_5_1"
  input: "^save/Assign_6_1"
  input: "^save/Assign_7_1"
  input: "^save/Assign_8_1"
  input: "^save/Assign_9_1"
}
node {
  name: "save_1/filename/input_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save_1/filename_1"
  op: "PlaceholderWithDefault"
  input: "save_1/filename/input_1"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save_1/Const_1"
  op: "PlaceholderWithDefault"
  input: "save_1/filename_1"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save_1/SaveV2/tensor_names_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save_1/SaveV2/shape_and_slices_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/SaveV2_1"
  op: "SaveV2"
  input: "save_1/Const_1"
  input: "save_1/SaveV2/tensor_names_1"
  input: "save_1/SaveV2/shape_and_slices_1"
  input: "decoder/fully_connected/biases_1"
  input: "decoder/fully_connected/weights_1"
  input: "encoder/fully_connected/biases_1"
  input: "encoder/fully_connected/weights_1"
  input: "encoder/fully_connected_1/biases_1"
  input: "encoder/fully_connected_1/weights_1"
  input: "encoder/fully_connected_2/biases_1"
  input: "encoder/fully_connected_2/weights_1"
  input: "global_step_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save_1/control_dependency_1"
  op: "Identity"
  input: "save_1/Const_1"
  input: "^save_1/SaveV2_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save_1/Const_1"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/tensor_names_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/shape_and_slices_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_1"
  op: "RestoreV2"
  input: "save_1/Const_1"
  input: "save_1/RestoreV2/tensor_names_1"
  input: "save_1/RestoreV2/shape_and_slices_1"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save_1/Assign_9"
  op: "Assign"
  input: "decoder/fully_connected/biases_1"
  input: "save_1/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_1_1"
  op: "Assign"
  input: "decoder/fully_connected/weights_1"
  input: "save_1/RestoreV2_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_2_1"
  op: "Assign"
  input: "encoder/fully_connected/biases_1"
  input: "save_1/RestoreV2_1:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_3_1"
  op: "Assign"
  input: "encoder/fully_connected/weights_1"
  input: "save_1/RestoreV2_1:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_4_1"
  op: "Assign"
  input: "encoder/fully_connected_1/biases_1"
  input: "save_1/RestoreV2_1:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_5_1"
  op: "Assign"
  input: "encoder/fully_connected_1/weights_1"
  input: "save_1/RestoreV2_1:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_6_1"
  op: "Assign"
  input: "encoder/fully_connected_2/biases_1"
  input: "save_1/RestoreV2_1:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_7_1"
  op: "Assign"
  input: "encoder/fully_connected_2/weights_1"
  input: "save_1/RestoreV2_1:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_8_1"
  op: "Assign"
  input: "global_step_1"
  input: "save_1/RestoreV2_1:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/restore_all_1"
  op: "NoOp"
  input: "^save_1/Assign_1_1"
  input: "^save_1/Assign_2_1"
  input: "^save_1/Assign_3_1"
  input: "^save_1/Assign_4_1"
  input: "^save_1/Assign_5_1"
  input: "^save_1/Assign_6_1"
  input: "^save_1/Assign_7_1"
  input: "^save_1/Assign_8_1"
  input: "^save_1/Assign_9"
}
node {
  name: "update_barrier_1"
  op: "NoOp"
  input: "^ExponentialMovingAverage_1"
}
node {
  name: "control_dependency_1"
  op: "Identity"
  input: "add_1"
  input: "^update_barrier_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_1"
      }
    }
  }
}
node {
  name: "gradients/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill_1"
  op: "Fill"
  input: "gradients/Shape_1"
  input: "gradients/grad_ys_0_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/Fill_1"
}
node {
  name: "gradients/add_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Fill_1"
  input: "^gradients/add_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill_1"
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/Fill_1"
  input: "^gradients/add_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_grad/Shape_2"
  input: "gradients/truediv_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_3"
  op: "RealDiv"
  input: "gradients/add_grad/tuple/control_dependency_2"
  input: "truediv/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum_2"
  op: "Sum"
  input: "gradients/truediv_grad/RealDiv_3"
  input: "gradients/truediv_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum_2"
  input: "gradients/truediv_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/Neg_1"
  op: "Neg"
  input: "softmax_cross_entropy_loss/value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_1_1"
  op: "RealDiv"
  input: "gradients/truediv_grad/Neg_1"
  input: "truediv/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_2_1"
  op: "RealDiv"
  input: "gradients/truediv_grad/RealDiv_1_1"
  input: "truediv/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/mul_1"
  op: "Mul"
  input: "gradients/add_grad/tuple/control_dependency_2"
  input: "gradients/truediv_grad/RealDiv_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/truediv_grad/mul_1"
  input: "gradients/truediv_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum_1_1"
  input: "gradients/truediv_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/truediv_grad/Reshape_1_1"
  input: "^gradients/truediv_grad/Reshape_2"
}
node {
  name: "gradients/truediv_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/truediv_grad/Reshape_2"
  input: "^gradients/truediv_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/truediv_grad/Reshape_1_1"
  input: "^gradients/truediv_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul_2"
  op: "Mul"
  input: "gradients/add_grad/tuple/control_dependency_1_1"
  input: "truediv_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mul_grad/Mul_1_1"
  op: "Mul"
  input: "gradients/add_grad/tuple/control_dependency_1_1"
  input: "mul/x_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/mul_grad/Mul_1_1"
  input: "^gradients/mul_grad/Mul_2"
}
node {
  name: "gradients/mul_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/mul_grad/Mul_2"
  input: "^gradients/mul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_2"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/mul_grad/Mul_1_1"
  input: "^gradients/mul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1_1"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape_2"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_3"
  op: "DivNoNan"
  input: "gradients/truediv_grad/tuple/control_dependency_2"
  input: "softmax_cross_entropy_loss/num_present_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Sum_2"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_3"
  input: "gradients/softmax_cross_entropy_loss/value_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Sum_2"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Neg_1"
  op: "Neg"
  input: "softmax_cross_entropy_loss/Sum_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_1_1"
  op: "DivNoNan"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Neg_1"
  input: "softmax_cross_entropy_loss/num_present_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_2_1"
  op: "DivNoNan"
  input: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_1_1"
  input: "softmax_cross_entropy_loss/num_present_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/mul_1"
  op: "Mul"
  input: "gradients/truediv_grad/tuple/control_dependency_2"
  input: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/value_grad/mul_1"
  input: "gradients/softmax_cross_entropy_loss/value_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Sum_1_1"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/Reshape_1_1"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/Reshape_2"
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Reshape_2"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/value_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Reshape_1_1"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/value_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_1_grad/Shape_2"
  input: "gradients/truediv_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_3"
  op: "RealDiv"
  input: "gradients/mul_grad/tuple/control_dependency_1_1"
  input: "truediv_1/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Sum_2"
  op: "Sum"
  input: "gradients/truediv_1_grad/RealDiv_3"
  input: "gradients/truediv_1_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/truediv_1_grad/Sum_2"
  input: "gradients/truediv_1_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Neg_1"
  op: "Neg"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_1_1"
  op: "RealDiv"
  input: "gradients/truediv_1_grad/Neg_1"
  input: "truediv_1/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_2_1"
  op: "RealDiv"
  input: "gradients/truediv_1_grad/RealDiv_1_1"
  input: "truediv_1/y_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/mul_1"
  op: "Mul"
  input: "gradients/mul_grad/tuple/control_dependency_1_1"
  input: "gradients/truediv_1_grad/RealDiv_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/truediv_1_grad/mul_1"
  input: "gradients/truediv_1_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/truediv_1_grad/Sum_1_1"
  input: "gradients/truediv_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/truediv_1_grad/Reshape_1_1"
  input: "^gradients/truediv_1_grad/Reshape_2"
}
node {
  name: "gradients/truediv_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/truediv_1_grad/Reshape_2"
  input: "^gradients/truediv_1_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_1_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/truediv_1_grad/Reshape_1_1"
  input: "^gradients/truediv_1_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_1_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency_2"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Tile_1"
  op: "Tile"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape_1"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/truediv_1_grad/tuple/control_dependency_2"
  input: "gradients/Sum_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Tile_1"
  op: "Tile"
  input: "gradients/Sum_grad/Reshape_1"
  input: "gradients/Sum_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Tile_1"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Shape_1"
  op: "Shape"
  input: "softmax_cross_entropy_loss/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile_1"
  op: "Tile"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape_1"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_4"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Size_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/add_1"
  op: "Add"
  input: "Mean/reduction_indices_1"
  input: "gradients/Mean_grad/Size_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/mod_1"
  op: "FloorMod"
  input: "gradients/Mean_grad/add_1"
  input: "gradients/Mean_grad/Size_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/start_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/delta_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range_1"
  op: "Range"
  input: "gradients/Mean_grad/range/start_1"
  input: "gradients/Mean_grad/Size_1"
  input: "gradients/Mean_grad/range/delta_1"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill/value_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill_1"
  op: "Fill"
  input: "gradients/Mean_grad/Shape_1_1"
  input: "gradients/Mean_grad/Fill/value_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/DynamicStitch_1"
  op: "DynamicStitch"
  input: "gradients/Mean_grad/range_1"
  input: "gradients/Mean_grad/mod_1"
  input: "gradients/Mean_grad/Shape_4"
  input: "gradients/Mean_grad/Fill_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_2"
  op: "Maximum"
  input: "gradients/Mean_grad/DynamicStitch_1"
  input: "gradients/Mean_grad/Maximum/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_2"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Shape_4"
  input: "gradients/Mean_grad/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_4"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Sum_grad/Tile_1"
  input: "gradients/Mean_grad/DynamicStitch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile_1"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape_1"
  input: "gradients/Mean_grad/floordiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2_1"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_3_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_2"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2_1"
  input: "gradients/Mean_grad/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_3_1"
  input: "gradients/Mean_grad/Const_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1/y_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1_1"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1_1"
  input: "gradients/Mean_grad/Maximum_1/y_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_1_1"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod_2"
  input: "gradients/Mean_grad/Maximum_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast_1"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv_1_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv_1"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile_1"
  input: "gradients/Mean_grad/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_2"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_2"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_2"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile_1"
  input: "softmax_cross_entropy_loss/ToFloat/x_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_2"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_2"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_2"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_1_1"
  op: "Mul"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_1"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_1_1"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_1_1"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1_1"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_2"
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_2"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1_1"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_2"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/truediv_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_1_1"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/mul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum_2"
  op: "Sum"
  input: "gradients/Mean_grad/truediv_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/Mean_grad/truediv_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_2"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Shape_1"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_2"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_2"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/Square_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_3"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_2"
  input: "KullbackLeibler/kl_normal_normal/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Neg_1"
  op: "Neg"
  input: "KullbackLeibler/kl_normal_normal/Square_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_1_1"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Neg_1"
  input: "KullbackLeibler/kl_normal_normal/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_2_1"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_1_1"
  input: "KullbackLeibler/kl_normal_normal/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/mul_1"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/mul_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_2"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_1_1"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/sub_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul_2"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_1_1"
  input: "KullbackLeibler/kl_normal_normal/sub_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul_1_1"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/Const_2_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_2"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "softmax_cross_entropy_loss/xentropy_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims/dim_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_2"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape_1"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims/dim_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_2"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_2"
  input: "softmax_cross_entropy_loss/xentropy_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/LogSoftmax_1"
  op: "LogSoftmax"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/Neg_1"
  op: "Neg"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/LogSoftmax_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1/dim_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1_1"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape_1"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1/dim_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1_1"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1_1"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1_1"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/mul_2"
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_2"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy_grad/mul_2"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1_1"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Const_1"
  op: "Const"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_2"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/sub_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_1_1"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_2"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/sub_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_1_1"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Neg_1"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Neg_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_2"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Shape_1"
  op: "Shape"
  input: "decoder/fully_connected/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency_2"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_2"
  op: "Shape"
  input: "encoder/Normal/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Neg_1"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Neg_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_2"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_2"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Neg_1"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Neg_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_2"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/Reciprocal_1"
  op: "Reciprocal"
  input: "KullbackLeibler/kl_normal_normal/truediv_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/mul_1"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/Reciprocal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad_1"
  input: "^gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape_1"
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape_1"
  input: "^gradients/decoder/fully_connected/BiasAdd_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad_1"
  input: "^gradients/decoder/fully_connected/BiasAdd_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/control_dependency_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_2"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_3"
  op: "RealDiv"
  input: "gradients/AddN_4"
  input: "KullbackLeibler/kl_normal_normal/Square_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Neg_1"
  op: "Neg"
  input: "KullbackLeibler/kl_normal_normal/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_1_1"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Neg_1"
  input: "KullbackLeibler/kl_normal_normal/Square_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_2_1"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_1_1"
  input: "KullbackLeibler/kl_normal_normal/Square_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/mul_1"
  op: "Mul"
  input: "gradients/AddN_4"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/mul_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_2"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1_1"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/MatMul_2"
  op: "MatMul"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_2"
  input: "decoder/fully_connected/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/MatMul_1_1"
  op: "MatMul"
  input: "encoder/Normal/sample/Reshape_1"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/decoder/fully_connected/MatMul_grad/MatMul_1_1"
  input: "^gradients/decoder/fully_connected/MatMul_grad/MatMul_2"
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/decoder/fully_connected/MatMul_grad/MatMul_2"
  input: "^gradients/decoder/fully_connected/MatMul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/fully_connected/MatMul_grad/MatMul_2"
      }
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/decoder/fully_connected/MatMul_grad/MatMul_1_1"
  input: "^gradients/decoder/fully_connected/MatMul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/fully_connected/MatMul_grad/MatMul_1_1"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Const_1"
  op: "Const"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_2"
  op: "Mul"
  input: "encoder/Normal/Identity_1_1"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_1_1"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/Reshape_grad/Shape_1"
  op: "Shape"
  input: "encoder/Normal/sample/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/Reshape_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency_2"
  input: "gradients/encoder/Normal/sample/Reshape_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Shape_2"
  op: "Shape"
  input: "encoder/Normal/sample/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Shape_1_1"
  op: "Shape"
  input: "encoder/Normal/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/Normal/sample/add_grad/Shape_2"
  input: "gradients/encoder/Normal/sample/add_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Sum_2"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/Reshape_grad/Reshape_1"
  input: "gradients/encoder/Normal/sample/add_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/add_grad/Sum_2"
  input: "gradients/encoder/Normal/sample/add_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/Reshape_grad/Reshape_1"
  input: "gradients/encoder/Normal/sample/add_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/add_grad/Sum_1_1"
  input: "gradients/encoder/Normal/sample/add_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/encoder/Normal/sample/add_grad/Reshape_1_1"
  input: "^gradients/encoder/Normal/sample/add_grad/Reshape_2"
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/add_grad/Reshape_2"
  input: "^gradients/encoder/Normal/sample/add_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/add_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/add_grad/Reshape_1_1"
  input: "^gradients/encoder/Normal/sample/add_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/add_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Shape_2"
  op: "Shape"
  input: "encoder/Normal/sample/random_normal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Shape_1_1"
  op: "Shape"
  input: "encoder/Normal/Identity_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape_2"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Mul_2"
  op: "Mul"
  input: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_2"
  input: "encoder/Normal/Identity_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Sum_2"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/mul_grad/Mul_2"
  input: "gradients/encoder/Normal/sample/mul_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/mul_grad/Sum_2"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Mul_1_1"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal_1"
  input: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/mul_grad/Mul_1_1"
  input: "gradients/encoder/Normal/sample/mul_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/mul_grad/Sum_1_1"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/encoder/Normal/sample/mul_grad/Reshape_1_1"
  input: "^gradients/encoder/Normal/sample/mul_grad/Reshape_2"
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/mul_grad/Reshape_2"
  input: "^gradients/encoder/Normal/sample/mul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/mul_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/mul_grad/Reshape_1_1"
  input: "^gradients/encoder/Normal/sample/mul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/mul_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_1_1"
  op: "AddN"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/control_dependency_2"
  input: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_1_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/AddN_2_1"
  op: "AddN"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_1_1"
  input: "gradients/encoder/Normal/sample/mul_grad/tuple/control_dependency_1_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_1_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_grad/Shape_1"
  op: "Shape"
  input: "encoder/fully_connected_2/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "gradients/encoder/strided_slice_grad/Shape_1"
  input: "encoder/strided_slice/stack_3"
  input: "encoder/strided_slice/stack_1_1"
  input: "encoder/strided_slice/stack_2_1"
  input: "gradients/AddN_1_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/encoder/Softplus_grad/SoftplusGrad_1"
  op: "SoftplusGrad"
  input: "gradients/AddN_2_1"
  input: "encoder/sub_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Shape_2"
  op: "Shape"
  input: "encoder/strided_slice_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Shape_1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/BroadcastGradientArgs_1"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/sub_1_grad/Shape_2"
  input: "gradients/encoder/sub_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Sum_2"
  op: "Sum"
  input: "gradients/encoder/Softplus_grad/SoftplusGrad_1"
  input: "gradients/encoder/sub_1_grad/BroadcastGradientArgs_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/encoder/sub_1_grad/Sum_2"
  input: "gradients/encoder/sub_1_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Sum_1_1"
  op: "Sum"
  input: "gradients/encoder/Softplus_grad/SoftplusGrad_1"
  input: "gradients/encoder/sub_1_grad/BroadcastGradientArgs_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Neg_1"
  op: "Neg"
  input: "gradients/encoder/sub_1_grad/Sum_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Reshape_1_1"
  op: "Reshape"
  input: "gradients/encoder/sub_1_grad/Neg_1"
  input: "gradients/encoder/sub_1_grad/Shape_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/encoder/sub_1_grad/Reshape_1_1"
  input: "^gradients/encoder/sub_1_grad/Reshape_2"
}
node {
  name: "gradients/encoder/sub_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/encoder/sub_1_grad/Reshape_2"
  input: "^gradients/encoder/sub_1_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sub_1_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/encoder/sub_1_grad/Reshape_1_1"
  input: "^gradients/encoder/sub_1_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sub_1_grad/Reshape_1_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_1_grad/Shape_1"
  op: "Shape"
  input: "encoder/fully_connected_2/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_1_grad/StridedSliceGrad_1"
  op: "StridedSliceGrad"
  input: "gradients/encoder/strided_slice_1_grad/Shape_1"
  input: "encoder/strided_slice_1/stack_3"
  input: "encoder/strided_slice_1/stack_1_1"
  input: "encoder/strided_slice_1/stack_2_1"
  input: "gradients/encoder/sub_1_grad/tuple/control_dependency_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/AddN_3_1"
  op: "AddN"
  input: "gradients/encoder/strided_slice_grad/StridedSliceGrad_1"
  input: "gradients/encoder/strided_slice_1_grad/StridedSliceGrad_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/strided_slice_grad/StridedSliceGrad_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "gradients/AddN_3_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/AddN_3_1"
  input: "^gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad_1"
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/AddN_3_1"
  input: "^gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/strided_slice_grad/StridedSliceGrad_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad_1"
  input: "^gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul_2"
  op: "MatMul"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_2"
  input: "encoder/fully_connected_2/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1_1"
  op: "MatMul"
  input: "encoder/fully_connected_1/Relu_1"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1_1"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/MatMul_2"
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul_2"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_2/MatMul_grad/MatMul_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1_1"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/Relu_grad/ReluGrad_1"
  op: "ReluGrad"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency_2"
  input: "encoder/fully_connected_1/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "gradients/encoder/fully_connected_1/Relu_grad/ReluGrad_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad_1"
  input: "^gradients/encoder/fully_connected_1/Relu_grad/ReluGrad_1"
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/Relu_grad/ReluGrad_1"
  input: "^gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/Relu_grad/ReluGrad_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad_1"
  input: "^gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul_2"
  op: "MatMul"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_2"
  input: "encoder/fully_connected_1/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1_1"
  op: "MatMul"
  input: "encoder/fully_connected/Relu_1"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1_1"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/MatMul_2"
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul_2"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/MatMul_grad/MatMul_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1_1"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/Relu_grad/ReluGrad_1"
  op: "ReluGrad"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency_2"
  input: "encoder/fully_connected/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad_1"
  op: "BiasAddGrad"
  input: "gradients/encoder/fully_connected/Relu_grad/ReluGrad_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad_1"
  input: "^gradients/encoder/fully_connected/Relu_grad/ReluGrad_1"
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected/Relu_grad/ReluGrad_1"
  input: "^gradients/encoder/fully_connected/BiasAdd_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/Relu_grad/ReluGrad_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad_1"
  input: "^gradients/encoder/fully_connected/BiasAdd_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad_1"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/MatMul_2"
  op: "MatMul"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_2"
  input: "encoder/fully_connected/weights/read_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/MatMul_1_1"
  op: "MatMul"
  input: "encoder/sub_2"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/tuple/group_deps_1"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected/MatMul_grad/MatMul_1_1"
  input: "^gradients/encoder/fully_connected/MatMul_grad/MatMul_2"
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected/MatMul_grad/MatMul_2"
  input: "^gradients/encoder/fully_connected/MatMul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/MatMul_grad/MatMul_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/tuple/control_dependency_1_1"
  op: "Identity"
  input: "gradients/encoder/fully_connected/MatMul_grad/MatMul_1_1"
  input: "^gradients/encoder/fully_connected/MatMul_grad/tuple/group_deps_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/MatMul_grad/MatMul_1_1"
      }
    }
  }
}
node {
  name: "beta1_power/initial_value_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "beta1_power_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign_1"
  op: "Assign"
  input: "beta1_power_1"
  input: "beta1_power/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read_1"
  op: "Identity"
  input: "beta1_power_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign_1"
  op: "Assign"
  input: "beta2_power_1"
  input: "beta2_power/initial_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read_1"
  op: "Identity"
  input: "beta2_power_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Initializer/zeros/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Initializer/zeros/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Initializer/zeros_1"
  op: "Fill"
  input: "encoder/fully_connected/weights/Adam/Initializer/zeros/shape_as_tensor_1"
  input: "encoder/fully_connected/weights/Adam/Initializer/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected/weights/Adam_2"
  input: "encoder/fully_connected/weights/Adam/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/read_1"
  op: "Identity"
  input: "encoder/fully_connected/weights/Adam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Initializer/zeros_1"
  op: "Fill"
  input: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/shape_as_tensor_1"
  input: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected/weights/Adam_1_1"
  input: "encoder/fully_connected/weights/Adam_1/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/read_1"
  op: "Identity"
  input: "encoder/fully_connected/weights/Adam_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected/biases/Adam_2"
  input: "encoder/fully_connected/biases/Adam/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam/read_1"
  op: "Identity"
  input: "encoder/fully_connected/biases/Adam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected/biases/Adam_1_1"
  input: "encoder/fully_connected/biases/Adam_1/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1/read_1"
  op: "Identity"
  input: "encoder/fully_connected/biases/Adam_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Initializer/zeros_1"
  op: "Fill"
  input: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/shape_as_tensor_1"
  input: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/Adam_2"
  input: "encoder/fully_connected_1/weights/Adam/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/read_1"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/Adam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros_1"
  op: "Fill"
  input: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/shape_as_tensor_1"
  input: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/Adam_1_1"
  input: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/read_1"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/Adam_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/Adam_2"
  input: "encoder/fully_connected_1/biases/Adam/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam/read_1"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/Adam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/Adam_1_1"
  input: "encoder/fully_connected_1/biases/Adam_1/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1/read_1"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/Adam_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Initializer/zeros_1"
  op: "Fill"
  input: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/shape_as_tensor_1"
  input: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/Adam_2"
  input: "encoder/fully_connected_2/weights/Adam/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/read_1"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/Adam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/shape_as_tensor_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros_1"
  op: "Fill"
  input: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/shape_as_tensor_1"
  input: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/Adam_1_1"
  input: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/read_1"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/Adam_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/Adam_2"
  input: "encoder/fully_connected_2/biases/Adam/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam/read_1"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/Adam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1/Assign_1"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/Adam_1_1"
  input: "encoder/fully_connected_2/biases/Adam_1/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1/read_1"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/Adam_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam/Assign_1"
  op: "Assign"
  input: "decoder/fully_connected/weights/Adam_2"
  input: "decoder/fully_connected/weights/Adam/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam/read_1"
  op: "Identity"
  input: "decoder/fully_connected/weights/Adam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1/Assign_1"
  op: "Assign"
  input: "decoder/fully_connected/weights/Adam_1_1"
  input: "decoder/fully_connected/weights/Adam_1/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1/read_1"
  op: "Identity"
  input: "decoder/fully_connected/weights/Adam_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam/Assign_1"
  op: "Assign"
  input: "decoder/fully_connected/biases/Adam_2"
  input: "decoder/fully_connected/biases/Adam/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam/read_1"
  op: "Identity"
  input: "decoder/fully_connected/biases/Adam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1/Initializer/zeros_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1/Assign_1"
  op: "Assign"
  input: "decoder/fully_connected/biases/Adam_1_1"
  input: "decoder/fully_connected/biases/Adam_1/Initializer/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1/read_1"
  op: "Identity"
  input: "decoder/fully_connected/biases/Adam_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "Adam/beta1_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "Adam/beta2_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected/weights/ApplyAdam_1"
  op: "ApplyAdam"
  input: "encoder/fully_connected/weights_1"
  input: "encoder/fully_connected/weights/Adam_2"
  input: "encoder/fully_connected/weights/Adam_1_1"
  input: "beta1_power/read_1"
  input: "beta2_power/read_1"
  input: "ExponentialDecay_1"
  input: "Adam/beta1_1"
  input: "Adam/beta2_1"
  input: "Adam/epsilon_1"
  input: "gradients/encoder/fully_connected/MatMul_grad/tuple/control_dependency_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected/biases/ApplyAdam_1"
  op: "ApplyAdam"
  input: "encoder/fully_connected/biases_1"
  input: "encoder/fully_connected/biases/Adam_2"
  input: "encoder/fully_connected/biases/Adam_1_1"
  input: "beta1_power/read_1"
  input: "beta2_power/read_1"
  input: "ExponentialDecay_1"
  input: "Adam/beta1_1"
  input: "Adam/beta2_1"
  input: "Adam/epsilon_1"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_1/weights/ApplyAdam_1"
  op: "ApplyAdam"
  input: "encoder/fully_connected_1/weights_1"
  input: "encoder/fully_connected_1/weights/Adam_2"
  input: "encoder/fully_connected_1/weights/Adam_1_1"
  input: "beta1_power/read_1"
  input: "beta2_power/read_1"
  input: "ExponentialDecay_1"
  input: "Adam/beta1_1"
  input: "Adam/beta2_1"
  input: "Adam/epsilon_1"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_1/biases/ApplyAdam_1"
  op: "ApplyAdam"
  input: "encoder/fully_connected_1/biases_1"
  input: "encoder/fully_connected_1/biases/Adam_2"
  input: "encoder/fully_connected_1/biases/Adam_1_1"
  input: "beta1_power/read_1"
  input: "beta2_power/read_1"
  input: "ExponentialDecay_1"
  input: "Adam/beta1_1"
  input: "Adam/beta2_1"
  input: "Adam/epsilon_1"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_2/weights/ApplyAdam_1"
  op: "ApplyAdam"
  input: "encoder/fully_connected_2/weights_1"
  input: "encoder/fully_connected_2/weights/Adam_2"
  input: "encoder/fully_connected_2/weights/Adam_1_1"
  input: "beta1_power/read_1"
  input: "beta2_power/read_1"
  input: "ExponentialDecay_1"
  input: "Adam/beta1_1"
  input: "Adam/beta2_1"
  input: "Adam/epsilon_1"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_2/biases/ApplyAdam_1"
  op: "ApplyAdam"
  input: "encoder/fully_connected_2/biases_1"
  input: "encoder/fully_connected_2/biases/Adam_2"
  input: "encoder/fully_connected_2/biases/Adam_1_1"
  input: "beta1_power/read_1"
  input: "beta2_power/read_1"
  input: "ExponentialDecay_1"
  input: "Adam/beta1_1"
  input: "Adam/beta2_1"
  input: "Adam/epsilon_1"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/fully_connected/weights/ApplyAdam_1"
  op: "ApplyAdam"
  input: "decoder/fully_connected/weights_1"
  input: "decoder/fully_connected/weights/Adam_2"
  input: "decoder/fully_connected/weights/Adam_1_1"
  input: "beta1_power/read_1"
  input: "beta2_power/read_1"
  input: "ExponentialDecay_1"
  input: "Adam/beta1_1"
  input: "Adam/beta2_1"
  input: "Adam/epsilon_1"
  input: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/fully_connected/biases/ApplyAdam_1"
  op: "ApplyAdam"
  input: "decoder/fully_connected/biases_1"
  input: "decoder/fully_connected/biases/Adam_2"
  input: "decoder/fully_connected/biases/Adam_1_1"
  input: "beta1_power/read_1"
  input: "beta2_power/read_1"
  input: "ExponentialDecay_1"
  input: "Adam/beta1_1"
  input: "Adam/beta2_1"
  input: "Adam/epsilon_1"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul_2"
  op: "Mul"
  input: "beta1_power/read_1"
  input: "Adam/beta1_1"
  input: "^Adam/update_decoder/fully_connected/biases/ApplyAdam_1"
  input: "^Adam/update_decoder/fully_connected/weights/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected/biases/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected/weights/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_1/biases/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_1/weights/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_2/biases/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_2/weights/ApplyAdam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "Adam/Assign_2"
  op: "Assign"
  input: "beta1_power_1"
  input: "Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1_1"
  op: "Mul"
  input: "beta2_power/read_1"
  input: "Adam/beta2_1"
  input: "^Adam/update_decoder/fully_connected/biases/ApplyAdam_1"
  input: "^Adam/update_decoder/fully_connected/weights/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected/biases/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected/weights/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_1/biases/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_1/weights/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_2/biases/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_2/weights/ApplyAdam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
}
node {
  name: "Adam/Assign_1_1"
  op: "Assign"
  input: "beta2_power_1"
  input: "Adam/mul_1_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update_1"
  op: "NoOp"
  input: "^Adam/Assign_1_1"
  input: "^Adam/Assign_2"
  input: "^Adam/update_decoder/fully_connected/biases/ApplyAdam_1"
  input: "^Adam/update_decoder/fully_connected/weights/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected/biases/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected/weights/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_1/biases/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_1/weights/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_2/biases/ApplyAdam_1"
  input: "^Adam/update_encoder/fully_connected_2/weights/ApplyAdam_1"
}
node {
  name: "Adam/value_1"
  op: "Const"
  input: "^Adam/update_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam_1"
  op: "AssignAdd"
  input: "global_step_1"
  input: "Adam/value_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/CheckNumerics_1"
  op: "CheckNumerics"
  input: "control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "LossTensor is inf or nan"
    }
  }
}
node {
  name: "train_op/control_dependency_1"
  op: "Identity"
  input: "train_op/CheckNumerics_1"
  input: "^Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/CheckNumerics_1"
      }
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^beta1_power/Assign_1"
  input: "^beta2_power/Assign_1"
  input: "^decoder/fully_connected/biases/Adam/Assign_1"
  input: "^decoder/fully_connected/biases/Adam_1/Assign_1"
  input: "^decoder/fully_connected/biases/Assign_1"
  input: "^decoder/fully_connected/biases/ExponentialMovingAverage/Assign_1"
  input: "^decoder/fully_connected/weights/Adam/Assign_1"
  input: "^decoder/fully_connected/weights/Adam_1/Assign_1"
  input: "^decoder/fully_connected/weights/Assign_1"
  input: "^decoder/fully_connected/weights/ExponentialMovingAverage/Assign_1"
  input: "^encoder/fully_connected/biases/Adam/Assign_1"
  input: "^encoder/fully_connected/biases/Adam_1/Assign_1"
  input: "^encoder/fully_connected/biases/Assign_1"
  input: "^encoder/fully_connected/biases/ExponentialMovingAverage/Assign_1"
  input: "^encoder/fully_connected/weights/Adam/Assign_1"
  input: "^encoder/fully_connected/weights/Adam_1/Assign_1"
  input: "^encoder/fully_connected/weights/Assign_1"
  input: "^encoder/fully_connected/weights/ExponentialMovingAverage/Assign_1"
  input: "^encoder/fully_connected_1/biases/Adam/Assign_1"
  input: "^encoder/fully_connected_1/biases/Adam_1/Assign_1"
  input: "^encoder/fully_connected_1/biases/Assign_1"
  input: "^encoder/fully_connected_1/biases/ExponentialMovingAverage/Assign_1"
  input: "^encoder/fully_connected_1/weights/Adam/Assign_1"
  input: "^encoder/fully_connected_1/weights/Adam_1/Assign_1"
  input: "^encoder/fully_connected_1/weights/Assign_1"
  input: "^encoder/fully_connected_1/weights/ExponentialMovingAverage/Assign_1"
  input: "^encoder/fully_connected_2/biases/Adam/Assign_1"
  input: "^encoder/fully_connected_2/biases/Adam_1/Assign_1"
  input: "^encoder/fully_connected_2/biases/Assign_1"
  input: "^encoder/fully_connected_2/biases/ExponentialMovingAverage/Assign_1"
  input: "^encoder/fully_connected_2/weights/Adam/Assign_1"
  input: "^encoder/fully_connected_2/weights/Adam_1/Assign_1"
  input: "^encoder/fully_connected_2/weights/Assign_1"
  input: "^encoder/fully_connected_2/weights/ExponentialMovingAverage/Assign_1"
  input: "^global_step/Assign_1"
}
node {
  name: "images_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 784
        }
      }
    }
  }
}
node {
  name: "labels_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "one_hot/on_value_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "one_hot/off_value_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot/depth_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "one_hot_2"
  op: "OneHot"
  input: "labels_2"
  input: "one_hot/depth_2"
  input: "one_hot/on_value_2"
  input: "one_hot/off_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "Normal/loc_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Normal/scale_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Normal/Identity_3"
  op: "Identity"
  input: "Normal/loc_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Normal/Identity_1_2"
  op: "Identity"
  input: "Normal/scale_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/mul/x_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "encoder/mul_2"
  op: "Mul"
  input: "encoder/mul/x_2"
  input: "images_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/sub/y_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/sub_3"
  op: "Sub"
  input: "encoder/mul_2"
  input: "encoder/sub/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/min_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08238525688648224
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/max_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08238525688648224
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/RandomUniform_2"
  op: "RandomUniform"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/sub_2"
  op: "Sub"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/max_2"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/min_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform/mul_2"
  op: "Mul"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/RandomUniform_2"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Initializer/random_uniform_2"
  op: "Add"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/mul_2"
  input: "encoder/fully_connected/weights/Initializer/random_uniform/min_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected/weights_2"
  input: "encoder/fully_connected/weights/Initializer/random_uniform_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/read_2"
  op: "Identity"
  input: "encoder/fully_connected/weights_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected/biases_2"
  input: "encoder/fully_connected/biases/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/read_2"
  op: "Identity"
  input: "encoder/fully_connected/biases_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/MatMul_2"
  op: "MatMul"
  input: "encoder/sub_3"
  input: "encoder/fully_connected/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/fully_connected/BiasAdd_2"
  op: "BiasAdd"
  input: "encoder/fully_connected/MatMul_2"
  input: "encoder/fully_connected/biases/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/fully_connected/Relu_2"
  op: "Relu"
  input: "encoder/fully_connected/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/min_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.17320507764816284
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/max_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.17320507764816284
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/RandomUniform_2"
  op: "RandomUniform"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/sub_2"
  op: "Sub"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/max_2"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/min_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform/mul_2"
  op: "Mul"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/RandomUniform_2"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Initializer/random_uniform_2"
  op: "Add"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/mul_2"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform/min_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_1/weights_2"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/read_2"
  op: "Identity"
  input: "encoder/fully_connected_1/weights_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_1/biases_2"
  input: "encoder/fully_connected_1/biases/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/read_2"
  op: "Identity"
  input: "encoder/fully_connected_1/biases_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/MatMul_2"
  op: "MatMul"
  input: "encoder/fully_connected/Relu_2"
  input: "encoder/fully_connected_1/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/fully_connected_1/BiasAdd_2"
  op: "BiasAdd"
  input: "encoder/fully_connected_1/MatMul_2"
  input: "encoder/fully_connected_1/biases/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/fully_connected_1/Relu_2"
  op: "Relu"
  input: "encoder/fully_connected_1/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/min_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21320071816444397
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/max_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21320071816444397
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/RandomUniform_2"
  op: "RandomUniform"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/sub_2"
  op: "Sub"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/max_2"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/min_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform/mul_2"
  op: "Mul"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/RandomUniform_2"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Initializer/random_uniform_2"
  op: "Add"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/mul_2"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform/min_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_2/weights_2"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/read_2"
  op: "Identity"
  input: "encoder/fully_connected_2/weights_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_2/biases_2"
  input: "encoder/fully_connected_2/biases/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/read_2"
  op: "Identity"
  input: "encoder/fully_connected_2/biases_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/MatMul_2"
  op: "MatMul"
  input: "encoder/fully_connected_1/Relu_2"
  input: "encoder/fully_connected_2/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/fully_connected_2/BiasAdd_2"
  op: "BiasAdd"
  input: "encoder/fully_connected_2/MatMul_2"
  input: "encoder/fully_connected_2/biases/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/strided_slice/stack_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice/stack_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice/stack_2_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_3"
  op: "StridedSlice"
  input: "encoder/fully_connected_2/BiasAdd_2"
  input: "encoder/strided_slice/stack_4"
  input: "encoder/strided_slice/stack_1_2"
  input: "encoder/strided_slice/stack_2_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/strided_slice_1/stack_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_1/stack_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_1/stack_2_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/strided_slice_1_2"
  op: "StridedSlice"
  input: "encoder/fully_connected_2/BiasAdd_2"
  input: "encoder/strided_slice_1/stack_4"
  input: "encoder/strided_slice_1/stack_1_2"
  input: "encoder/strided_slice_1/stack_2_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/sub_1/y_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "encoder/sub_1_2"
  op: "Sub"
  input: "encoder/strided_slice_1_2"
  input: "encoder/sub_1/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Softplus_2"
  op: "Softplus"
  input: "encoder/sub_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/Identity_3"
  op: "Identity"
  input: "encoder/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/Identity_1_2"
  op: "Identity"
  input: "encoder/Softplus_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/sample_shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor/Shape_3"
  op: "Shape"
  input: "encoder/Normal/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor/Shape_1_2"
  op: "Shape"
  input: "encoder/Normal/Identity_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor/BroadcastArgs_2"
  op: "BroadcastArgs"
  input: "encoder/Normal/batch_shape_tensor/Shape_3"
  input: "encoder/Normal/batch_shape_tensor/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/concat/values_0_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat/axis_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat_3"
  op: "ConcatV2"
  input: "encoder/Normal/sample/concat/values_0_2"
  input: "encoder/Normal/batch_shape_tensor/BroadcastArgs_2"
  input: "encoder/Normal/sample/concat/axis_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/mean_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/stddev_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/RandomStandardNormal_2"
  op: "RandomStandardNormal"
  input: "encoder/Normal/sample/concat_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal/mul_2"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal/RandomStandardNormal_2"
  input: "encoder/Normal/sample/random_normal/stddev_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/random_normal_2"
  op: "Add"
  input: "encoder/Normal/sample/random_normal/mul_2"
  input: "encoder/Normal/sample/random_normal/mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/mul_2"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal_2"
  input: "encoder/Normal/Identity_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/add_2"
  op: "Add"
  input: "encoder/Normal/sample/mul_2"
  input: "encoder/Normal/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample/Shape_2"
  op: "Shape"
  input: "encoder/Normal/sample/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice/stack_2_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/strided_slice_2"
  op: "StridedSlice"
  input: "encoder/Normal/sample/Shape_2"
  input: "encoder/Normal/sample/strided_slice/stack_4"
  input: "encoder/Normal/sample/strided_slice/stack_1_2"
  input: "encoder/Normal/sample/strided_slice/stack_2_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample/concat_1/axis_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample/concat_1_2"
  op: "ConcatV2"
  input: "encoder/Normal/sample/sample_shape_2"
  input: "encoder/Normal/sample/strided_slice_2"
  input: "encoder/Normal/sample/concat_1/axis_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample/Reshape_2"
  op: "Reshape"
  input: "encoder/Normal/sample/add_2"
  input: "encoder/Normal/sample/concat_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/min_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4803844690322876
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/max_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4803844690322876
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/RandomUniform_2"
  op: "RandomUniform"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/sub_2"
  op: "Sub"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/max_2"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/min_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform/mul_2"
  op: "Mul"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/RandomUniform_2"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Initializer/random_uniform_2"
  op: "Add"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/mul_2"
  input: "decoder/fully_connected/weights/Initializer/random_uniform/min_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Assign_2"
  op: "Assign"
  input: "decoder/fully_connected/weights_2"
  input: "decoder/fully_connected/weights/Initializer/random_uniform_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/read_2"
  op: "Identity"
  input: "decoder/fully_connected/weights_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Assign_2"
  op: "Assign"
  input: "decoder/fully_connected/biases_2"
  input: "decoder/fully_connected/biases/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/read_2"
  op: "Identity"
  input: "decoder/fully_connected/biases_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/MatMul_2"
  op: "MatMul"
  input: "encoder/Normal/sample/Reshape_2"
  input: "decoder/fully_connected/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/fully_connected/BiasAdd_2"
  op: "BiasAdd"
  input: "decoder/fully_connected/MatMul_2"
  input: "decoder/fully_connected/biases/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/Normal/sample_1/sample_shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/expand_to_vector/sample_shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor_1/Shape_3"
  op: "Shape"
  input: "encoder/Normal/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor_1/Shape_1_2"
  op: "Shape"
  input: "encoder/Normal/Identity_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/batch_shape_tensor_1/BroadcastArgs_2"
  op: "BroadcastArgs"
  input: "encoder/Normal/batch_shape_tensor_1/Shape_3"
  input: "encoder/Normal/batch_shape_tensor_1/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat/values_0_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat/axis_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat_3"
  op: "ConcatV2"
  input: "encoder/Normal/sample_1/concat/values_0_2"
  input: "encoder/Normal/batch_shape_tensor_1/BroadcastArgs_2"
  input: "encoder/Normal/sample_1/concat/axis_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/mean_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/stddev_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/RandomStandardNormal_2"
  op: "RandomStandardNormal"
  input: "encoder/Normal/sample_1/concat_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal/mul_2"
  op: "Mul"
  input: "encoder/Normal/sample_1/random_normal/RandomStandardNormal_2"
  input: "encoder/Normal/sample_1/random_normal/stddev_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/random_normal_2"
  op: "Add"
  input: "encoder/Normal/sample_1/random_normal/mul_2"
  input: "encoder/Normal/sample_1/random_normal/mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/mul_2"
  op: "Mul"
  input: "encoder/Normal/sample_1/random_normal_2"
  input: "encoder/Normal/Identity_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/add_2"
  op: "Add"
  input: "encoder/Normal/sample_1/mul_2"
  input: "encoder/Normal/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/Normal/sample_1/Shape_2"
  op: "Shape"
  input: "encoder/Normal/sample_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice/stack_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice/stack_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice/stack_2_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/strided_slice_2"
  op: "StridedSlice"
  input: "encoder/Normal/sample_1/Shape_2"
  input: "encoder/Normal/sample_1/strided_slice/stack_4"
  input: "encoder/Normal/sample_1/strided_slice/stack_1_2"
  input: "encoder/Normal/sample_1/strided_slice/stack_2_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat_1/axis_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/Normal/sample_1/concat_1_2"
  op: "ConcatV2"
  input: "encoder/Normal/sample_1/expand_to_vector/sample_shape_2"
  input: "encoder/Normal/sample_1/strided_slice_2"
  input: "encoder/Normal/sample_1/concat_1/axis_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/Normal/sample_1/Reshape_2"
  op: "Reshape"
  input: "encoder/Normal/sample_1/add_2"
  input: "encoder/Normal/sample_1/concat_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/axes_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/free_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Shape_2"
  op: "Shape"
  input: "encoder/Normal/sample_1/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2/axis_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2_3"
  op: "GatherV2"
  input: "decoder_1/fully_connected/Tensordot/Shape_2"
  input: "decoder_1/fully_connected/Tensordot/free_2"
  input: "decoder_1/fully_connected/Tensordot/GatherV2/axis_2"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2_1/axis_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/GatherV2_1_2"
  op: "GatherV2"
  input: "decoder_1/fully_connected/Tensordot/Shape_2"
  input: "decoder_1/fully_connected/Tensordot/axes_2"
  input: "decoder_1/fully_connected/Tensordot/GatherV2_1/axis_2"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Prod_3"
  op: "Prod"
  input: "decoder_1/fully_connected/Tensordot/GatherV2_3"
  input: "decoder_1/fully_connected/Tensordot/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Const_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Prod_1_2"
  op: "Prod"
  input: "decoder_1/fully_connected/Tensordot/GatherV2_1_2"
  input: "decoder_1/fully_connected/Tensordot/Const_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat/axis_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat_3"
  op: "ConcatV2"
  input: "decoder_1/fully_connected/Tensordot/free_2"
  input: "decoder_1/fully_connected/Tensordot/axes_2"
  input: "decoder_1/fully_connected/Tensordot/concat/axis_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/stack_2"
  op: "Pack"
  input: "decoder_1/fully_connected/Tensordot/Prod_3"
  input: "decoder_1/fully_connected/Tensordot/Prod_1_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/transpose_3"
  op: "Transpose"
  input: "encoder/Normal/sample_1/Reshape_2"
  input: "decoder_1/fully_connected/Tensordot/concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Reshape_3"
  op: "Reshape"
  input: "decoder_1/fully_connected/Tensordot/transpose_3"
  input: "decoder_1/fully_connected/Tensordot/stack_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/transpose_1/perm_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/transpose_1_2"
  op: "Transpose"
  input: "decoder/fully_connected/weights/read_2"
  input: "decoder_1/fully_connected/Tensordot/transpose_1/perm_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Reshape_1/shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Reshape_1_2"
  op: "Reshape"
  input: "decoder_1/fully_connected/Tensordot/transpose_1_2"
  input: "decoder_1/fully_connected/Tensordot/Reshape_1/shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/MatMul_2"
  op: "MatMul"
  input: "decoder_1/fully_connected/Tensordot/Reshape_3"
  input: "decoder_1/fully_connected/Tensordot/Reshape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/Const_2_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat_1/axis_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot/concat_1_2"
  op: "ConcatV2"
  input: "decoder_1/fully_connected/Tensordot/GatherV2_3"
  input: "decoder_1/fully_connected/Tensordot/Const_2_2"
  input: "decoder_1/fully_connected/Tensordot/concat_1/axis_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/Tensordot_2"
  op: "Reshape"
  input: "decoder_1/fully_connected/Tensordot/MatMul_2"
  input: "decoder_1/fully_connected/Tensordot/concat_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder_1/fully_connected/BiasAdd_2"
  op: "BiasAdd"
  input: "decoder_1/fully_connected/Tensordot_2"
  input: "decoder/fully_connected/biases/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/labels_stop_gradient_2"
  op: "StopGradient"
  input: "one_hot_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape_4"
  op: "Shape"
  input: "decoder/fully_connected/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape_1_2"
  op: "Shape"
  input: "decoder/fully_connected/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub/y_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_4"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank_1_2"
  input: "softmax_cross_entropy_loss/xentropy/Sub/y_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice/begin_2"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub_4"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice/size_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_4"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape_1_2"
  input: "softmax_cross_entropy_loss/xentropy/Slice/begin_2"
  input: "softmax_cross_entropy_loss/xentropy/Slice/size_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat/values_0_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat/axis_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_3"
  op: "ConcatV2"
  input: "softmax_cross_entropy_loss/xentropy/concat/values_0_2"
  input: "softmax_cross_entropy_loss/xentropy/Slice_4"
  input: "softmax_cross_entropy_loss/xentropy/concat/axis_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape_4"
  op: "Reshape"
  input: "decoder/fully_connected/BiasAdd_2"
  input: "softmax_cross_entropy_loss/xentropy/concat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Rank_2_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Shape_2_2"
  op: "Shape"
  input: "softmax_cross_entropy_loss/labels_stop_gradient_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_1/y_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_1_2"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank_2_2"
  input: "softmax_cross_entropy_loss/xentropy/Sub_1/y_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1/begin_2"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub_1_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1/size_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_1_2"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape_2_2"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1/begin_2"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1/size_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1/values_0_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1/axis_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/concat_1_2"
  op: "ConcatV2"
  input: "softmax_cross_entropy_loss/xentropy/concat_1/values_0_2"
  input: "softmax_cross_entropy_loss/xentropy/Slice_1_2"
  input: "softmax_cross_entropy_loss/xentropy/concat_1/axis_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape_1_2"
  op: "Reshape"
  input: "softmax_cross_entropy_loss/labels_stop_gradient_2"
  input: "softmax_cross_entropy_loss/xentropy/concat_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy_2"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_4"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_2/y_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Sub_2_2"
  op: "Sub"
  input: "softmax_cross_entropy_loss/xentropy/Rank_4"
  input: "softmax_cross_entropy_loss/xentropy/Sub_2/y_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2/begin_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2/size_2"
  op: "Pack"
  input: "softmax_cross_entropy_loss/xentropy/Sub_2_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Slice_2_2"
  op: "Slice"
  input: "softmax_cross_entropy_loss/xentropy/Shape_4"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2/begin_2"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2/size_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/xentropy/Reshape_2_2"
  op: "Reshape"
  input: "softmax_cross_entropy_loss/xentropy_2"
  input: "softmax_cross_entropy_loss/xentropy/Slice_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights/shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/weights/rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/values/shape_2"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/values/rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  op: "NoOp"
}
node {
  name: "softmax_cross_entropy_loss/ToFloat/x_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Mul_2"
  op: "Mul"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_2"
  input: "softmax_cross_entropy_loss/ToFloat/x_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Const_3"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Sum_3"
  op: "Sum"
  input: "softmax_cross_entropy_loss/Mul_2"
  input: "softmax_cross_entropy_loss/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Equal/y_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Equal_2"
  op: "Equal"
  input: "softmax_cross_entropy_loss/ToFloat/x_2"
  input: "softmax_cross_entropy_loss/num_present/Equal/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/zeros_like_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like/Shape_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like/Const_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/ones_like_2"
  op: "Fill"
  input: "softmax_cross_entropy_loss/num_present/ones_like/Shape_2"
  input: "softmax_cross_entropy_loss/num_present/ones_like/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Select_2"
  op: "Select"
  input: "softmax_cross_entropy_loss/num_present/Equal_2"
  input: "softmax_cross_entropy_loss/num_present/zeros_like_2"
  input: "softmax_cross_entropy_loss/num_present/ones_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/shape_2"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_2"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/rank_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success_2"
  op: "NoOp"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape_2"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_2"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  input: "^softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  input: "^softmax_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like_2"
  op: "Fill"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape_2"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/broadcast_weights_2"
  op: "Mul"
  input: "softmax_cross_entropy_loss/num_present/Select_2"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights/ones_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present/Const_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/num_present_2"
  op: "Sum"
  input: "softmax_cross_entropy_loss/num_present/broadcast_weights_2"
  input: "softmax_cross_entropy_loss/num_present/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Const_1_2"
  op: "Const"
  input: "^softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success_2"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/Sum_1_2"
  op: "Sum"
  input: "softmax_cross_entropy_loss/Sum_3"
  input: "softmax_cross_entropy_loss/Const_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "softmax_cross_entropy_loss/value_2"
  op: "DivNoNan"
  input: "softmax_cross_entropy_loss/Sum_1_2"
  input: "softmax_cross_entropy_loss/num_present_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv/y_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6931471824645996
      }
    }
  }
}
node {
  name: "truediv_3"
  op: "RealDiv"
  input: "softmax_cross_entropy_loss/value_2"
  input: "truediv/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Const_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Const_2_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Square_4"
  op: "Square"
  input: "encoder/Normal/Identity_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Square_1_2"
  op: "Square"
  input: "Normal/Identity_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/truediv_3"
  op: "RealDiv"
  input: "KullbackLeibler/kl_normal_normal/Square_4"
  input: "KullbackLeibler/kl_normal_normal/Square_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/sub_4"
  op: "Sub"
  input: "encoder/Normal/Identity_3"
  input: "Normal/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Square_2_2"
  op: "Square"
  input: "KullbackLeibler/kl_normal_normal/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/mul_3"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/Const_1_2"
  input: "KullbackLeibler/kl_normal_normal/Square_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/truediv_1_2"
  op: "RealDiv"
  input: "KullbackLeibler/kl_normal_normal/Square_2_2"
  input: "KullbackLeibler/kl_normal_normal/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/sub_1_2"
  op: "Sub"
  input: "KullbackLeibler/kl_normal_normal/truediv_3"
  input: "KullbackLeibler/kl_normal_normal/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/Log_2"
  op: "Log"
  input: "KullbackLeibler/kl_normal_normal/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/sub_2_2"
  op: "Sub"
  input: "KullbackLeibler/kl_normal_normal/sub_1_2"
  input: "KullbackLeibler/kl_normal_normal/Log_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/mul_1_2"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/Const_2_2"
  input: "KullbackLeibler/kl_normal_normal/sub_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "KullbackLeibler/kl_normal_normal/add_2"
  op: "Add"
  input: "KullbackLeibler/kl_normal_normal/truediv_1_2"
  input: "KullbackLeibler/kl_normal_normal/mul_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Mean/reduction_indices_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_5"
  op: "Mean"
  input: "KullbackLeibler/kl_normal_normal/add_2"
  input: "Mean/reduction_indices_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_2"
  op: "Sum"
  input: "Mean_5"
  input: "Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "truediv_1/y_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6931471824645996
      }
    }
  }
}
node {
  name: "truediv_1_2"
  op: "RealDiv"
  input: "Sum_2"
  input: "truediv_1/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul/x_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "mul_2"
  op: "Mul"
  input: "mul/x_2"
  input: "truediv_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_2"
  op: "Add"
  input: "truediv_3"
  input: "mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ArgMax/dimension_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_3"
  op: "ArgMax"
  input: "decoder/fully_connected/BiasAdd_2"
  input: "ArgMax/dimension_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal_3"
  op: "Equal"
  input: "ArgMax_3"
  input: "labels_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Cast_3"
  op: "Cast"
  input: "Equal_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Const_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_1_2"
  op: "Mean"
  input: "Cast_3"
  input: "Const_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Softmax_2"
  op: "Softmax"
  input: "decoder_1/fully_connected/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Mean_2/reduction_indices_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_2_2"
  op: "Mean"
  input: "Softmax_2"
  input: "Mean_2/reduction_indices_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ArgMax_1/dimension_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_1_2"
  op: "ArgMax"
  input: "Mean_2_2"
  input: "ArgMax_1/dimension_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal_1_2"
  op: "Equal"
  input: "ArgMax_1_2"
  input: "labels_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Cast_1_2"
  op: "Cast"
  input: "Equal_1_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Const_2_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_3_2"
  op: "Mean"
  input: "Cast_1_2"
  input: "Const_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sub/x_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.321928024291992
      }
    }
  }
}
node {
  name: "sub_2"
  op: "Sub"
  input: "sub/x_2"
  input: "truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_step/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign_2"
  op: "Assign"
  input: "global_step_2"
  input: "global_step/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read_2"
  op: "Identity"
  input: "global_step_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_2"
      }
    }
  }
}
node {
  name: "ExponentialDecay/learning_rate_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1200
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_4"
  op: "Cast"
  input: "ExponentialDecay/Cast/x_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9700000286102295
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2_2"
  op: "Cast"
  input: "global_step/read_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialDecay/truediv_2"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2_2"
  input: "ExponentialDecay/Cast_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Floor_2"
  op: "Floor"
  input: "ExponentialDecay/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Pow_2"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x_2"
  input: "ExponentialDecay/Floor_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay_2"
  op: "Mul"
  input: "ExponentialDecay/learning_rate_2"
  input: "ExponentialDecay/Pow_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/weights_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond/Switch_3"
  op: "Switch"
  input: "IsVariableInitialized_9"
  input: "IsVariableInitialized_9"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_t_2"
  op: "Identity"
  input: "cond/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_f_2"
  op: "Identity"
  input: "cond/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/pred_id_2"
  op: "Identity"
  input: "IsVariableInitialized_9"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected/weights_2"
  input: "cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "cond/read_2"
  op: "Identity"
  input: "cond/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected/weights/Initializer/random_uniform_2"
  input: "cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "cond/Merge_2"
  op: "Merge"
  input: "cond/Switch_1_2"
  input: "cond/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/weights_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_3"
  op: "Switch"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_t_2"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_f_2"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_2"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected/weights_2"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read_2"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected/weights/Initializer/random_uniform_2"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_2"
  op: "Merge"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1_2"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_encoder/fully_connected/weights/ExponentialMovingAverage_0_2"
  op: "Switch"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_2"
  input: "cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read_encoder/fully_connected/weights/ExponentialMovingAverage_0_2"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_encoder/fully_connected/weights/ExponentialMovingAverage_0_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_encoder/fully_connected/weights/ExponentialMovingAverage_0_2"
  op: "Merge"
  input: "cond/Switch_1_2"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/read_encoder/fully_connected/weights/ExponentialMovingAverage_0_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage_2"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_encoder/fully_connected/weights/ExponentialMovingAverage_0_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/ExponentialMovingAverage/read_2"
  op: "Identity"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_1_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/biases_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_1/Switch_3"
  op: "Switch"
  input: "IsVariableInitialized_1_2"
  input: "IsVariableInitialized_1_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/switch_t_2"
  op: "Identity"
  input: "cond_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/switch_f_2"
  op: "Identity"
  input: "cond_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/pred_id_2"
  op: "Identity"
  input: "IsVariableInitialized_1_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected/biases_2"
  input: "cond_1/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "cond_1/read_2"
  op: "Identity"
  input: "cond_1/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_1/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected/biases/Initializer/zeros_2"
  input: "cond_1/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "cond_1/Merge_2"
  op: "Merge"
  input: "cond_1/Switch_1_2"
  input: "cond_1/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected/biases_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_3"
  op: "Switch"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_t_2"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_f_2"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_2"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected/biases_2"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read_2"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected/biases/Initializer/zeros_2"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge_2"
  op: "Merge"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1_2"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read/Switch_encoder/fully_connected/biases/ExponentialMovingAverage_0_2"
  op: "Switch"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge_2"
  input: "cond_1/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read_encoder/fully_connected/biases/ExponentialMovingAverage_0_2"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read/Switch_encoder/fully_connected/biases/ExponentialMovingAverage_0_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/Merge_encoder/fully_connected/biases/ExponentialMovingAverage_0_2"
  op: "Merge"
  input: "cond_1/Switch_1_2"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/read_encoder/fully_connected/biases/ExponentialMovingAverage_0_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage_2"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/cond_1/Merge_encoder/fully_connected/biases/ExponentialMovingAverage_0_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/ExponentialMovingAverage/read_2"
  op: "Identity"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_2_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/weights_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/Switch_3"
  op: "Switch"
  input: "IsVariableInitialized_2_2"
  input: "IsVariableInitialized_2_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/switch_t_2"
  op: "Identity"
  input: "cond_2/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/switch_f_2"
  op: "Identity"
  input: "cond_2/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/pred_id_2"
  op: "Identity"
  input: "IsVariableInitialized_2_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/weights_2"
  input: "cond_2/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "cond_2/read_2"
  op: "Identity"
  input: "cond_2/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform_2"
  input: "cond_2/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "cond_2/Merge_2"
  op: "Merge"
  input: "cond_2/Switch_1_2"
  input: "cond_2/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/weights_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_3"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/switch_t_2"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/switch_f_2"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/pred_id_2"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/weights_2"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read_2"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/Initializer/random_uniform_2"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Merge_2"
  op: "Merge"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Switch_1_2"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read/Switch_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_2"
  op: "Switch"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond/Merge_2"
  input: "cond_2/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_2"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read/Switch_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/Merge_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_2"
  op: "Merge"
  input: "cond_2/Switch_1_2"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/read_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage_2"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/cond_2/Merge_encoder/fully_connected_1/weights/ExponentialMovingAverage_0_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/ExponentialMovingAverage/read_2"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_3_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/biases_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_3/Switch_3"
  op: "Switch"
  input: "IsVariableInitialized_3_2"
  input: "IsVariableInitialized_3_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/switch_t_2"
  op: "Identity"
  input: "cond_3/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/switch_f_2"
  op: "Identity"
  input: "cond_3/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/pred_id_2"
  op: "Identity"
  input: "IsVariableInitialized_3_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/biases_2"
  input: "cond_3/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "cond_3/read_2"
  op: "Identity"
  input: "cond_3/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_3/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/Initializer/zeros_2"
  input: "cond_3/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "cond_3/Merge_2"
  op: "Merge"
  input: "cond_3/Switch_1_2"
  input: "cond_3/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_1/biases_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_3"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/switch_t_2"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/switch_f_2"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/pred_id_2"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected_1/biases_2"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read_2"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/Initializer/zeros_2"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Merge_2"
  op: "Merge"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Switch_1_2"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read/Switch_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_2"
  op: "Switch"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond/Merge_2"
  input: "cond_3/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_2"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read/Switch_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/Merge_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_2"
  op: "Merge"
  input: "cond_3/Switch_1_2"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/read_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage_2"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/cond_3/Merge_encoder/fully_connected_1/biases/ExponentialMovingAverage_0_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/ExponentialMovingAverage/read_2"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_4_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/weights_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_4/Switch_3"
  op: "Switch"
  input: "IsVariableInitialized_4_2"
  input: "IsVariableInitialized_4_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/switch_t_2"
  op: "Identity"
  input: "cond_4/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/switch_f_2"
  op: "Identity"
  input: "cond_4/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/pred_id_2"
  op: "Identity"
  input: "IsVariableInitialized_4_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/weights_2"
  input: "cond_4/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "cond_4/read_2"
  op: "Identity"
  input: "cond_4/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_4/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform_2"
  input: "cond_4/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "cond_4/Merge_2"
  op: "Merge"
  input: "cond_4/Switch_1_2"
  input: "cond_4/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/weights_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_3"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/switch_t_2"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/switch_f_2"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/pred_id_2"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/weights_2"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read_2"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/Initializer/random_uniform_2"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Merge_2"
  op: "Merge"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Switch_1_2"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read/Switch_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_2"
  op: "Switch"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond/Merge_2"
  input: "cond_4/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_2"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read/Switch_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/Merge_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_2"
  op: "Merge"
  input: "cond_4/Switch_1_2"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/read_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage_2"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/cond_4/Merge_encoder/fully_connected_2/weights/ExponentialMovingAverage_0_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/ExponentialMovingAverage/read_2"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_5_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/biases_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_5/Switch_3"
  op: "Switch"
  input: "IsVariableInitialized_5_2"
  input: "IsVariableInitialized_5_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/switch_t_2"
  op: "Identity"
  input: "cond_5/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/switch_f_2"
  op: "Identity"
  input: "cond_5/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/pred_id_2"
  op: "Identity"
  input: "IsVariableInitialized_5_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/biases_2"
  input: "cond_5/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "cond_5/read_2"
  op: "Identity"
  input: "cond_5/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_5/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/Initializer/zeros_2"
  input: "cond_5/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "cond_5/Merge_2"
  op: "Merge"
  input: "cond_5/Switch_1_2"
  input: "cond_5/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/fully_connected_2/biases_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_3"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/switch_t_2"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/switch_f_2"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/pred_id_2"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read/Switch_2"
  op: "RefSwitch"
  input: "encoder/fully_connected_2/biases_2"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read_2"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_1_2"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/Initializer/zeros_2"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Merge_2"
  op: "Merge"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Switch_1_2"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read/Switch_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_2"
  op: "Switch"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond/Merge_2"
  input: "cond_5/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_2"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read/Switch_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/Merge_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_2"
  op: "Merge"
  input: "cond_5/Switch_1_2"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/read_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage_2"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/cond_5/Merge_encoder/fully_connected_2/biases/ExponentialMovingAverage_0_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/ExponentialMovingAverage/read_2"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_6_2"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/weights_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_6/Switch_3"
  op: "Switch"
  input: "IsVariableInitialized_6_2"
  input: "IsVariableInitialized_6_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/switch_t_2"
  op: "Identity"
  input: "cond_6/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/switch_f_2"
  op: "Identity"
  input: "cond_6/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/pred_id_2"
  op: "Identity"
  input: "IsVariableInitialized_6_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/read/Switch_2"
  op: "RefSwitch"
  input: "decoder/fully_connected/weights_2"
  input: "cond_6/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "cond_6/read_2"
  op: "Identity"
  input: "cond_6/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_6/Switch_1_2"
  op: "Switch"
  input: "decoder/fully_connected/weights/Initializer/random_uniform_2"
  input: "cond_6/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "cond_6/Merge_2"
  op: "Merge"
  input: "cond_6/Switch_1_2"
  input: "cond_6/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/weights_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_3"
  op: "Switch"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_t_2"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/switch_f_2"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_2"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_2"
  op: "RefSwitch"
  input: "decoder/fully_connected/weights_2"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read_2"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1_2"
  op: "Switch"
  input: "decoder/fully_connected/weights/Initializer/random_uniform_2"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_2"
  op: "Merge"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Switch_1_2"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read/Switch_decoder/fully_connected/weights/ExponentialMovingAverage_0_2"
  op: "Switch"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond/Merge_2"
  input: "cond_6/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read_decoder/fully_connected/weights/ExponentialMovingAverage_0_2"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read/Switch_decoder/fully_connected/weights/ExponentialMovingAverage_0_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/Merge_decoder/fully_connected/weights/ExponentialMovingAverage_0_2"
  op: "Merge"
  input: "cond_6/Switch_1_2"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/read_decoder/fully_connected/weights/ExponentialMovingAverage_0_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/Assign_2"
  op: "Assign"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage_2"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/cond_6/Merge_decoder/fully_connected/weights/ExponentialMovingAverage_0_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/ExponentialMovingAverage/read_2"
  op: "Identity"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_7_2"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/biases_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_7/Switch_3"
  op: "Switch"
  input: "IsVariableInitialized_7_2"
  input: "IsVariableInitialized_7_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/switch_t_2"
  op: "Identity"
  input: "cond_7/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/switch_f_2"
  op: "Identity"
  input: "cond_7/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/pred_id_2"
  op: "Identity"
  input: "IsVariableInitialized_7_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/read/Switch_2"
  op: "RefSwitch"
  input: "decoder/fully_connected/biases_2"
  input: "cond_7/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "cond_7/read_2"
  op: "Identity"
  input: "cond_7/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_7/Switch_1_2"
  op: "Switch"
  input: "decoder/fully_connected/biases/Initializer/zeros_2"
  input: "cond_7/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "cond_7/Merge_2"
  op: "Merge"
  input: "cond_7/Switch_1_2"
  input: "cond_7/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "decoder/fully_connected/biases_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_3"
  op: "Switch"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_t_2"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/switch_f_2"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_2"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch_2"
  op: "RefSwitch"
  input: "decoder/fully_connected/biases_2"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read_2"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1_2"
  op: "Switch"
  input: "decoder/fully_connected/biases/Initializer/zeros_2"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge_2"
  op: "Merge"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Switch_1_2"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/read_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read/Switch_decoder/fully_connected/biases/ExponentialMovingAverage_0_2"
  op: "Switch"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond/Merge_2"
  input: "cond_7/pred_id_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read_decoder/fully_connected/biases/ExponentialMovingAverage_0_2"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read/Switch_decoder/fully_connected/biases/ExponentialMovingAverage_0_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/Merge_decoder/fully_connected/biases/ExponentialMovingAverage_0_2"
  op: "Merge"
  input: "cond_7/Switch_1_2"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/read_decoder/fully_connected/biases/ExponentialMovingAverage_0_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/Assign_2"
  op: "Assign"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage_2"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/cond_7/Merge_decoder/fully_connected/biases/ExponentialMovingAverage_0_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/ExponentialMovingAverage/read_2"
  op: "Identity"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/decay_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub/x_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub_3"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub/x_2"
  input: "ExponentialMovingAverage/decay_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub_1_2"
  op: "Sub"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage/read_2"
  input: "encoder/fully_connected/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/mul_2"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub_1_2"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9"
  op: "AssignSub"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage_2"
  input: "ExponentialMovingAverage/AssignMovingAvg/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub_3"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x_2"
  input: "ExponentialMovingAverage/decay_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1_2"
  op: "Sub"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage/read_2"
  input: "encoder/fully_connected/biases/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/mul_2"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1_2"
  op: "AssignSub"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub_3"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x_2"
  input: "ExponentialMovingAverage/decay_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1_2"
  op: "Sub"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage/read_2"
  input: "encoder/fully_connected_1/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/mul_2"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2_2"
  op: "AssignSub"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub_3"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x_2"
  input: "ExponentialMovingAverage/decay_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1_2"
  op: "Sub"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage/read_2"
  input: "encoder/fully_connected_1/biases/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/mul_2"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3_2"
  op: "AssignSub"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub/x_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub_3"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub/x_2"
  input: "ExponentialMovingAverage/decay_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub_1_2"
  op: "Sub"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage/read_2"
  input: "encoder/fully_connected_2/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/mul_2"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub_1_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4_2"
  op: "AssignSub"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub/x_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub_3"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub/x_2"
  input: "ExponentialMovingAverage/decay_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub_1_2"
  op: "Sub"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage/read_2"
  input: "encoder/fully_connected_2/biases/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/mul_2"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub_1_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5_2"
  op: "AssignSub"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub/x_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub_3"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub/x_2"
  input: "ExponentialMovingAverage/decay_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub_1_2"
  op: "Sub"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage/read_2"
  input: "decoder/fully_connected/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/mul_2"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub_1_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6_2"
  op: "AssignSub"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub/x_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub_3"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub/x_2"
  input: "ExponentialMovingAverage/decay_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub_1_2"
  op: "Sub"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage/read_2"
  input: "decoder/fully_connected/biases/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/mul_2"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub_1_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7_2"
  op: "AssignSub"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage_2"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage_2"
  op: "NoOp"
  input: "^ExponentialMovingAverage/AssignMovingAvg_1_2"
  input: "^ExponentialMovingAverage/AssignMovingAvg_2_2"
  input: "^ExponentialMovingAverage/AssignMovingAvg_3_2"
  input: "^ExponentialMovingAverage/AssignMovingAvg_4_2"
  input: "^ExponentialMovingAverage/AssignMovingAvg_5_2"
  input: "^ExponentialMovingAverage/AssignMovingAvg_6_2"
  input: "^ExponentialMovingAverage/AssignMovingAvg_7_2"
  input: "^ExponentialMovingAverage/AssignMovingAvg_9"
}
node {
  name: "save/filename/input_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename_2"
  op: "PlaceholderWithDefault"
  input: "save/filename/input_2"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "PlaceholderWithDefault"
  input: "save/filename_2"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: "decoder/fully_connected/biases"
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2_2"
  op: "SaveV2"
  input: "save/Const_2"
  input: "save/SaveV2/tensor_names_2"
  input: "save/SaveV2/shape_and_slices_2"
  input: "decoder/fully_connected/biases_2"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage_2"
  input: "decoder/fully_connected/weights_2"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage_2"
  input: "encoder/fully_connected/biases_2"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage_2"
  input: "encoder/fully_connected/weights_2"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage_2"
  input: "encoder/fully_connected_1/biases_2"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage_2"
  input: "encoder/fully_connected_1/weights_2"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage_2"
  input: "encoder/fully_connected_2/biases_2"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage_2"
  input: "encoder/fully_connected_2/weights_2"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage_2"
  input: "global_step_2"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency_2"
  op: "Identity"
  input: "save/Const_2"
  input: "^save/SaveV2_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const_2"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: "decoder/fully_connected/biases"
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 17
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const_2"
  input: "save/RestoreV2/tensor_names_2"
  input: "save/RestoreV2/shape_and_slices_2"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "decoder/fully_connected/biases_2"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1_2"
  op: "Assign"
  input: "decoder/fully_connected/biases/ExponentialMovingAverage_2"
  input: "save/RestoreV2_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2_2"
  op: "Assign"
  input: "decoder/fully_connected/weights_2"
  input: "save/RestoreV2_2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3_2"
  op: "Assign"
  input: "decoder/fully_connected/weights/ExponentialMovingAverage_2"
  input: "save/RestoreV2_2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4_2"
  op: "Assign"
  input: "encoder/fully_connected/biases_2"
  input: "save/RestoreV2_2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5_2"
  op: "Assign"
  input: "encoder/fully_connected/biases/ExponentialMovingAverage_2"
  input: "save/RestoreV2_2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6_2"
  op: "Assign"
  input: "encoder/fully_connected/weights_2"
  input: "save/RestoreV2_2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7_2"
  op: "Assign"
  input: "encoder/fully_connected/weights/ExponentialMovingAverage_2"
  input: "save/RestoreV2_2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8_2"
  op: "Assign"
  input: "encoder/fully_connected_1/biases_2"
  input: "save/RestoreV2_2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9_2"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/ExponentialMovingAverage_2"
  input: "save/RestoreV2_2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10_2"
  op: "Assign"
  input: "encoder/fully_connected_1/weights_2"
  input: "save/RestoreV2_2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11_2"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/ExponentialMovingAverage_2"
  input: "save/RestoreV2_2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12_2"
  op: "Assign"
  input: "encoder/fully_connected_2/biases_2"
  input: "save/RestoreV2_2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13_2"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/ExponentialMovingAverage_2"
  input: "save/RestoreV2_2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14_2"
  op: "Assign"
  input: "encoder/fully_connected_2/weights_2"
  input: "save/RestoreV2_2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15_2"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/ExponentialMovingAverage_2"
  input: "save/RestoreV2_2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16_2"
  op: "Assign"
  input: "global_step_2"
  input: "save/RestoreV2_2:16"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all_2"
  op: "NoOp"
  input: "^save/Assign_10_2"
  input: "^save/Assign_11_2"
  input: "^save/Assign_12_2"
  input: "^save/Assign_13_2"
  input: "^save/Assign_14_2"
  input: "^save/Assign_15_2"
  input: "^save/Assign_16_2"
  input: "^save/Assign_18"
  input: "^save/Assign_1_2"
  input: "^save/Assign_2_2"
  input: "^save/Assign_3_2"
  input: "^save/Assign_4_2"
  input: "^save/Assign_5_2"
  input: "^save/Assign_6_2"
  input: "^save/Assign_7_2"
  input: "^save/Assign_8_2"
  input: "^save/Assign_9_2"
}
node {
  name: "save_1/filename/input_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save_1/filename_2"
  op: "PlaceholderWithDefault"
  input: "save_1/filename/input_2"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save_1/Const_2"
  op: "PlaceholderWithDefault"
  input: "save_1/filename_2"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save_1/SaveV2/tensor_names_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save_1/SaveV2/shape_and_slices_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/SaveV2_2"
  op: "SaveV2"
  input: "save_1/Const_2"
  input: "save_1/SaveV2/tensor_names_2"
  input: "save_1/SaveV2/shape_and_slices_2"
  input: "decoder/fully_connected/biases_2"
  input: "decoder/fully_connected/weights_2"
  input: "encoder/fully_connected/biases_2"
  input: "encoder/fully_connected/weights_2"
  input: "encoder/fully_connected_1/biases_2"
  input: "encoder/fully_connected_1/weights_2"
  input: "encoder/fully_connected_2/biases_2"
  input: "encoder/fully_connected_2/weights_2"
  input: "global_step_2"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save_1/control_dependency_2"
  op: "Identity"
  input: "save_1/Const_2"
  input: "^save_1/SaveV2_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save_1/Const_2"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/tensor_names_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: "decoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "decoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_1/weights/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/biases/ExponentialMovingAverage"
        string_val: "encoder/fully_connected_2/weights/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save_1/RestoreV2/shape_and_slices_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 9
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save_1/RestoreV2_2"
  op: "RestoreV2"
  input: "save_1/Const_2"
  input: "save_1/RestoreV2/tensor_names_2"
  input: "save_1/RestoreV2/shape_and_slices_2"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save_1/Assign_10"
  op: "Assign"
  input: "decoder/fully_connected/biases_2"
  input: "save_1/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_1_2"
  op: "Assign"
  input: "decoder/fully_connected/weights_2"
  input: "save_1/RestoreV2_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_2_2"
  op: "Assign"
  input: "encoder/fully_connected/biases_2"
  input: "save_1/RestoreV2_2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_3_2"
  op: "Assign"
  input: "encoder/fully_connected/weights_2"
  input: "save_1/RestoreV2_2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_4_2"
  op: "Assign"
  input: "encoder/fully_connected_1/biases_2"
  input: "save_1/RestoreV2_2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_5_2"
  op: "Assign"
  input: "encoder/fully_connected_1/weights_2"
  input: "save_1/RestoreV2_2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_6_2"
  op: "Assign"
  input: "encoder/fully_connected_2/biases_2"
  input: "save_1/RestoreV2_2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_7_2"
  op: "Assign"
  input: "encoder/fully_connected_2/weights_2"
  input: "save_1/RestoreV2_2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/Assign_8_2"
  op: "Assign"
  input: "global_step_2"
  input: "save_1/RestoreV2_2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save_1/restore_all_2"
  op: "NoOp"
  input: "^save_1/Assign_10"
  input: "^save_1/Assign_1_2"
  input: "^save_1/Assign_2_2"
  input: "^save_1/Assign_3_2"
  input: "^save_1/Assign_4_2"
  input: "^save_1/Assign_5_2"
  input: "^save_1/Assign_6_2"
  input: "^save_1/Assign_7_2"
  input: "^save_1/Assign_8_2"
}
node {
  name: "update_barrier_2"
  op: "NoOp"
  input: "^ExponentialMovingAverage_2"
}
node {
  name: "control_dependency_2"
  op: "Identity"
  input: "add_2"
  input: "^update_barrier_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_2"
      }
    }
  }
}
node {
  name: "gradients/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill_2"
  op: "Fill"
  input: "gradients/Shape_2"
  input: "gradients/grad_ys_0_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/Fill_2"
}
node {
  name: "gradients/add_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Fill_2"
  input: "^gradients/add_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill_2"
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/Fill_2"
  input: "^gradients/add_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_grad/Shape_3"
  input: "gradients/truediv_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_4"
  op: "RealDiv"
  input: "gradients/add_grad/tuple/control_dependency_3"
  input: "truediv/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum_3"
  op: "Sum"
  input: "gradients/truediv_grad/RealDiv_4"
  input: "gradients/truediv_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum_3"
  input: "gradients/truediv_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/Neg_2"
  op: "Neg"
  input: "softmax_cross_entropy_loss/value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_1_2"
  op: "RealDiv"
  input: "gradients/truediv_grad/Neg_2"
  input: "truediv/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_2_2"
  op: "RealDiv"
  input: "gradients/truediv_grad/RealDiv_1_2"
  input: "truediv/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/mul_2"
  op: "Mul"
  input: "gradients/add_grad/tuple/control_dependency_3"
  input: "gradients/truediv_grad/RealDiv_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/truediv_grad/mul_2"
  input: "gradients/truediv_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum_1_2"
  input: "gradients/truediv_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/truediv_grad/Reshape_1_2"
  input: "^gradients/truediv_grad/Reshape_3"
}
node {
  name: "gradients/truediv_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/truediv_grad/Reshape_3"
  input: "^gradients/truediv_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/truediv_grad/Reshape_1_2"
  input: "^gradients/truediv_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul_3"
  op: "Mul"
  input: "gradients/add_grad/tuple/control_dependency_1_2"
  input: "truediv_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mul_grad/Mul_1_2"
  op: "Mul"
  input: "gradients/add_grad/tuple/control_dependency_1_2"
  input: "mul/x_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/mul_grad/Mul_1_2"
  input: "^gradients/mul_grad/Mul_3"
}
node {
  name: "gradients/mul_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/mul_grad/Mul_3"
  input: "^gradients/mul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_3"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/mul_grad/Mul_1_2"
  input: "^gradients/mul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1_2"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Shape_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape_3"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_4"
  op: "DivNoNan"
  input: "gradients/truediv_grad/tuple/control_dependency_3"
  input: "softmax_cross_entropy_loss/num_present_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Sum_3"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_4"
  input: "gradients/softmax_cross_entropy_loss/value_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Sum_3"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Neg_2"
  op: "Neg"
  input: "softmax_cross_entropy_loss/Sum_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_1_2"
  op: "DivNoNan"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Neg_2"
  input: "softmax_cross_entropy_loss/num_present_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_2_2"
  op: "DivNoNan"
  input: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_1_2"
  input: "softmax_cross_entropy_loss/num_present_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/mul_2"
  op: "Mul"
  input: "gradients/truediv_grad/tuple/control_dependency_3"
  input: "gradients/softmax_cross_entropy_loss/value_grad/div_no_nan_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/value_grad/mul_2"
  input: "gradients/softmax_cross_entropy_loss/value_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Sum_1_2"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/Reshape_1_2"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/Reshape_3"
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Reshape_3"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/value_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/value_grad/Reshape_1_2"
  input: "^gradients/softmax_cross_entropy_loss/value_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/value_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Shape_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_1_grad/Shape_3"
  input: "gradients/truediv_1_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_4"
  op: "RealDiv"
  input: "gradients/mul_grad/tuple/control_dependency_1_2"
  input: "truediv_1/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Sum_3"
  op: "Sum"
  input: "gradients/truediv_1_grad/RealDiv_4"
  input: "gradients/truediv_1_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/truediv_1_grad/Sum_3"
  input: "gradients/truediv_1_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Neg_2"
  op: "Neg"
  input: "Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_1_2"
  op: "RealDiv"
  input: "gradients/truediv_1_grad/Neg_2"
  input: "truediv_1/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_2_2"
  op: "RealDiv"
  input: "gradients/truediv_1_grad/RealDiv_1_2"
  input: "truediv_1/y_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/mul_2"
  op: "Mul"
  input: "gradients/mul_grad/tuple/control_dependency_1_2"
  input: "gradients/truediv_1_grad/RealDiv_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/truediv_1_grad/mul_2"
  input: "gradients/truediv_1_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/truediv_1_grad/Sum_1_2"
  input: "gradients/truediv_1_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/truediv_1_grad/Reshape_1_2"
  input: "^gradients/truediv_1_grad/Reshape_3"
}
node {
  name: "gradients/truediv_1_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/truediv_1_grad/Reshape_3"
  input: "^gradients/truediv_1_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_1_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/truediv_1_grad/Reshape_1_2"
  input: "^gradients/truediv_1_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/truediv_1_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/value_grad/tuple/control_dependency_3"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Tile_2"
  op: "Tile"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Reshape_2"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape/shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/truediv_1_grad/tuple/control_dependency_3"
  input: "gradients/Sum_grad/Reshape/shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Tile_2"
  op: "Tile"
  input: "gradients/Sum_grad/Reshape_2"
  input: "gradients/Sum_grad/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape/shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Sum_1_grad/Tile_2"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape/shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Shape_2"
  op: "Shape"
  input: "softmax_cross_entropy_loss/Mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile_2"
  op: "Tile"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Reshape_2"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_5"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Size_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/add_2"
  op: "Add"
  input: "Mean/reduction_indices_2"
  input: "gradients/Mean_grad/Size_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/mod_2"
  op: "FloorMod"
  input: "gradients/Mean_grad/add_2"
  input: "gradients/Mean_grad/Size_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/start_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/delta_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range_2"
  op: "Range"
  input: "gradients/Mean_grad/range/start_2"
  input: "gradients/Mean_grad/Size_2"
  input: "gradients/Mean_grad/range/delta_2"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill/value_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill_2"
  op: "Fill"
  input: "gradients/Mean_grad/Shape_1_2"
  input: "gradients/Mean_grad/Fill/value_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/DynamicStitch_2"
  op: "DynamicStitch"
  input: "gradients/Mean_grad/range_2"
  input: "gradients/Mean_grad/mod_2"
  input: "gradients/Mean_grad/Shape_5"
  input: "gradients/Mean_grad/Fill_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_3"
  op: "Maximum"
  input: "gradients/Mean_grad/DynamicStitch_2"
  input: "gradients/Mean_grad/Maximum/y_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_3"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Shape_5"
  input: "gradients/Mean_grad/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_5"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Sum_grad/Tile_2"
  input: "gradients/Mean_grad/DynamicStitch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile_2"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape_2"
  input: "gradients/Mean_grad/floordiv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2_2"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_3_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_3"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2_2"
  input: "gradients/Mean_grad/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1_2"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_3_2"
  input: "gradients/Mean_grad/Const_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1/y_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1_2"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1_2"
  input: "gradients/Mean_grad/Maximum_1/y_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_1_2"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod_3"
  input: "gradients/Mean_grad/Maximum_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast_2"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv_1_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv_2"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile_2"
  input: "gradients/Mean_grad/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_3"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_3"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_3"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile_2"
  input: "softmax_cross_entropy_loss/ToFloat/x_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_3"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_3"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_3"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_1_2"
  op: "Mul"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_2_2"
  input: "gradients/softmax_cross_entropy_loss/Sum_grad/Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Mul_1_2"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Sum_1_2"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1_2"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_3"
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_3"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1_2"
  input: "^gradients/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/Mul_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_3"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/truediv_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_1_2"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/mul_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum_3"
  op: "Sum"
  input: "gradients/Mean_grad/truediv_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/Mean_grad/truediv_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Sum_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_3"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_3"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/add_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Shape_2"
  op: "Shape"
  input: "softmax_cross_entropy_loss/xentropy_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_3"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_3"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/Square_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_4"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_3"
  input: "KullbackLeibler/kl_normal_normal/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum_3"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_4"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Neg_2"
  op: "Neg"
  input: "KullbackLeibler/kl_normal_normal/Square_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_1_2"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Neg_2"
  input: "KullbackLeibler/kl_normal_normal/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_2_2"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_1_2"
  input: "KullbackLeibler/kl_normal_normal/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/mul_2"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/RealDiv_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/mul_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Sum_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_3"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_3"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_1_2"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/sub_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul_3"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_1_2"
  input: "KullbackLeibler/kl_normal_normal/sub_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum_3"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul_1_2"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/Const_2_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/add_grad/tuple/control_dependency_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Mul_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Sum_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_3"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_3"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "softmax_cross_entropy_loss/xentropy_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims/dim_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_3"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape_2"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims/dim_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_3"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_3"
  input: "softmax_cross_entropy_loss/xentropy_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/LogSoftmax_2"
  op: "LogSoftmax"
  input: "softmax_cross_entropy_loss/xentropy/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/Neg_2"
  op: "Neg"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/LogSoftmax_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1/dim_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1_2"
  op: "ExpandDims"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_2_grad/Reshape_2"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1/dim_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1_2"
  op: "Mul"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/ExpandDims_1_2"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/Neg_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1_2"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/mul_3"
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_3"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy_grad/mul_3"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1_2"
  input: "^gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy_grad/mul_1_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Const_2"
  op: "Const"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_3"
  op: "Mul"
  input: "KullbackLeibler/kl_normal_normal/sub_4"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_1_2"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_1_grad/tuple/control_dependency_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_3"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/sub_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_1_2"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/Log_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum_3"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/mul_1_grad/tuple/control_dependency_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Neg_2"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Sum_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Neg_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_3"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_3"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Shape_2"
  op: "Shape"
  input: "decoder/fully_connected/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/softmax_cross_entropy_loss/xentropy_grad/tuple/control_dependency_3"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_3"
  op: "Shape"
  input: "encoder/Normal/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum_3"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_2_grad/Mul_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Neg_2"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Sum_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Neg_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_3"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_3"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_3"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum_3"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Neg_2"
  op: "Neg"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Sum_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Neg_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_3"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_3"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/Reciprocal_2"
  op: "Reciprocal"
  input: "KullbackLeibler/kl_normal_normal/truediv_3"
  input: "^gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/mul_2"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_2_grad/tuple/control_dependency_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/Reciprocal_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad_2"
  op: "BiasAddGrad"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad_2"
  input: "^gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape_2"
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape_2"
  input: "^gradients/decoder/fully_connected/BiasAdd_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/softmax_cross_entropy_loss/xentropy/Reshape_grad/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad_2"
  input: "^gradients/decoder/fully_connected/BiasAdd_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/fully_connected/BiasAdd_grad/BiasAddGrad_2"
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/tuple/control_dependency_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/Log_grad/mul_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_1_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_3"
  op: "Shape"
  input: "KullbackLeibler/kl_normal_normal/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_4"
  op: "RealDiv"
  input: "gradients/AddN_5"
  input: "KullbackLeibler/kl_normal_normal/Square_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum_3"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_4"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Neg_2"
  op: "Neg"
  input: "KullbackLeibler/kl_normal_normal/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_1_2"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Neg_2"
  input: "KullbackLeibler/kl_normal_normal/Square_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_2_2"
  op: "RealDiv"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_1_2"
  input: "KullbackLeibler/kl_normal_normal/Square_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/mul_2"
  op: "Mul"
  input: "gradients/AddN_5"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/RealDiv_2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/mul_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Sum_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_3"
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_3"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1_2"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/truediv_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/MatMul_3"
  op: "MatMul"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_3"
  input: "decoder/fully_connected/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/MatMul_1_2"
  op: "MatMul"
  input: "encoder/Normal/sample/Reshape_2"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/decoder/fully_connected/MatMul_grad/MatMul_1_2"
  input: "^gradients/decoder/fully_connected/MatMul_grad/MatMul_3"
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/decoder/fully_connected/MatMul_grad/MatMul_3"
  input: "^gradients/decoder/fully_connected/MatMul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/fully_connected/MatMul_grad/MatMul_3"
      }
    }
  }
}
node {
  name: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/decoder/fully_connected/MatMul_grad/MatMul_1_2"
  input: "^gradients/decoder/fully_connected/MatMul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/decoder/fully_connected/MatMul_grad/MatMul_1_2"
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Const_2"
  op: "Const"
  input: "^gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_3"
  op: "Mul"
  input: "encoder/Normal/Identity_1_2"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_1_2"
  op: "Mul"
  input: "gradients/KullbackLeibler/kl_normal_normal/truediv_grad/tuple/control_dependency_3"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/Reshape_grad/Shape_2"
  op: "Shape"
  input: "encoder/Normal/sample/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/Reshape_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency_3"
  input: "gradients/encoder/Normal/sample/Reshape_grad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Shape_3"
  op: "Shape"
  input: "encoder/Normal/sample/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Shape_1_2"
  op: "Shape"
  input: "encoder/Normal/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/Normal/sample/add_grad/Shape_3"
  input: "gradients/encoder/Normal/sample/add_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Sum_3"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/Reshape_grad/Reshape_2"
  input: "gradients/encoder/Normal/sample/add_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/add_grad/Sum_3"
  input: "gradients/encoder/Normal/sample/add_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/Reshape_grad/Reshape_2"
  input: "gradients/encoder/Normal/sample/add_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/add_grad/Sum_1_2"
  input: "gradients/encoder/Normal/sample/add_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/encoder/Normal/sample/add_grad/Reshape_1_2"
  input: "^gradients/encoder/Normal/sample/add_grad/Reshape_3"
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/add_grad/Reshape_3"
  input: "^gradients/encoder/Normal/sample/add_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/add_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/add_grad/Reshape_1_2"
  input: "^gradients/encoder/Normal/sample/add_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/add_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Shape_3"
  op: "Shape"
  input: "encoder/Normal/sample/random_normal_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Shape_1_2"
  op: "Shape"
  input: "encoder/Normal/Identity_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape_3"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Mul_3"
  op: "Mul"
  input: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_3"
  input: "encoder/Normal/Identity_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Sum_3"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/mul_grad/Mul_3"
  input: "gradients/encoder/Normal/sample/mul_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/mul_grad/Sum_3"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Mul_1_2"
  op: "Mul"
  input: "encoder/Normal/sample/random_normal_2"
  input: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/encoder/Normal/sample/mul_grad/Mul_1_2"
  input: "gradients/encoder/Normal/sample/mul_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/encoder/Normal/sample/mul_grad/Sum_1_2"
  input: "gradients/encoder/Normal/sample/mul_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/encoder/Normal/sample/mul_grad/Reshape_1_2"
  input: "^gradients/encoder/Normal/sample/mul_grad/Reshape_3"
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/mul_grad/Reshape_3"
  input: "^gradients/encoder/Normal/sample/mul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/mul_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/encoder/Normal/sample/mul_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/encoder/Normal/sample/mul_grad/Reshape_1_2"
  input: "^gradients/encoder/Normal/sample/mul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/Normal/sample/mul_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/AddN_1_2"
  op: "AddN"
  input: "gradients/KullbackLeibler/kl_normal_normal/sub_grad/tuple/control_dependency_3"
  input: "gradients/encoder/Normal/sample/add_grad/tuple/control_dependency_1_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/sub_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/AddN_2_2"
  op: "AddN"
  input: "gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_1_2"
  input: "gradients/encoder/Normal/sample/mul_grad/tuple/control_dependency_1_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/KullbackLeibler/kl_normal_normal/Square_grad/Mul_1_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_grad/Shape_2"
  op: "Shape"
  input: "encoder/fully_connected_2/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_grad/StridedSliceGrad_2"
  op: "StridedSliceGrad"
  input: "gradients/encoder/strided_slice_grad/Shape_2"
  input: "encoder/strided_slice/stack_4"
  input: "encoder/strided_slice/stack_1_2"
  input: "encoder/strided_slice/stack_2_2"
  input: "gradients/AddN_1_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/encoder/Softplus_grad/SoftplusGrad_2"
  op: "SoftplusGrad"
  input: "gradients/AddN_2_2"
  input: "encoder/sub_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Shape_3"
  op: "Shape"
  input: "encoder/strided_slice_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Shape_1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/BroadcastGradientArgs_2"
  op: "BroadcastGradientArgs"
  input: "gradients/encoder/sub_1_grad/Shape_3"
  input: "gradients/encoder/sub_1_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Sum_3"
  op: "Sum"
  input: "gradients/encoder/Softplus_grad/SoftplusGrad_2"
  input: "gradients/encoder/sub_1_grad/BroadcastGradientArgs_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Reshape_3"
  op: "Reshape"
  input: "gradients/encoder/sub_1_grad/Sum_3"
  input: "gradients/encoder/sub_1_grad/Shape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Sum_1_2"
  op: "Sum"
  input: "gradients/encoder/Softplus_grad/SoftplusGrad_2"
  input: "gradients/encoder/sub_1_grad/BroadcastGradientArgs_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Neg_2"
  op: "Neg"
  input: "gradients/encoder/sub_1_grad/Sum_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/Reshape_1_2"
  op: "Reshape"
  input: "gradients/encoder/sub_1_grad/Neg_2"
  input: "gradients/encoder/sub_1_grad/Shape_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/encoder/sub_1_grad/Reshape_1_2"
  input: "^gradients/encoder/sub_1_grad/Reshape_3"
}
node {
  name: "gradients/encoder/sub_1_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/encoder/sub_1_grad/Reshape_3"
  input: "^gradients/encoder/sub_1_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sub_1_grad/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/encoder/sub_1_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/encoder/sub_1_grad/Reshape_1_2"
  input: "^gradients/encoder/sub_1_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/sub_1_grad/Reshape_1_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_1_grad/Shape_2"
  op: "Shape"
  input: "encoder/fully_connected_2/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/encoder/strided_slice_1_grad/StridedSliceGrad_2"
  op: "StridedSliceGrad"
  input: "gradients/encoder/strided_slice_1_grad/Shape_2"
  input: "encoder/strided_slice_1/stack_4"
  input: "encoder/strided_slice_1/stack_1_2"
  input: "encoder/strided_slice_1/stack_2_2"
  input: "gradients/encoder/sub_1_grad/tuple/control_dependency_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/AddN_3_2"
  op: "AddN"
  input: "gradients/encoder/strided_slice_grad/StridedSliceGrad_2"
  input: "gradients/encoder/strided_slice_1_grad/StridedSliceGrad_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/strided_slice_grad/StridedSliceGrad_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad_2"
  op: "BiasAddGrad"
  input: "gradients/AddN_3_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/AddN_3_2"
  input: "^gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad_2"
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/AddN_3_2"
  input: "^gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/strided_slice_grad/StridedSliceGrad_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad_2"
  input: "^gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_2/BiasAdd_grad/BiasAddGrad_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul_3"
  op: "MatMul"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_3"
  input: "encoder/fully_connected_2/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1_2"
  op: "MatMul"
  input: "encoder/fully_connected_1/Relu_2"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1_2"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/MatMul_3"
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul_3"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_2/MatMul_grad/MatMul_3"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1_2"
  input: "^gradients/encoder/fully_connected_2/MatMul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_2/MatMul_grad/MatMul_1_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/Relu_grad/ReluGrad_2"
  op: "ReluGrad"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency_3"
  input: "encoder/fully_connected_1/Relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad_2"
  op: "BiasAddGrad"
  input: "gradients/encoder/fully_connected_1/Relu_grad/ReluGrad_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad_2"
  input: "^gradients/encoder/fully_connected_1/Relu_grad/ReluGrad_2"
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/Relu_grad/ReluGrad_2"
  input: "^gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/Relu_grad/ReluGrad_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad_2"
  input: "^gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/BiasAdd_grad/BiasAddGrad_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul_3"
  op: "MatMul"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_3"
  input: "encoder/fully_connected_1/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1_2"
  op: "MatMul"
  input: "encoder/fully_connected/Relu_2"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1_2"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/MatMul_3"
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul_3"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/MatMul_grad/MatMul_3"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1_2"
  input: "^gradients/encoder/fully_connected_1/MatMul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected_1/MatMul_grad/MatMul_1_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/Relu_grad/ReluGrad_2"
  op: "ReluGrad"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency_3"
  input: "encoder/fully_connected/Relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad_2"
  op: "BiasAddGrad"
  input: "gradients/encoder/fully_connected/Relu_grad/ReluGrad_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad_2"
  input: "^gradients/encoder/fully_connected/Relu_grad/ReluGrad_2"
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/encoder/fully_connected/Relu_grad/ReluGrad_2"
  input: "^gradients/encoder/fully_connected/BiasAdd_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/Relu_grad/ReluGrad_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad_2"
  input: "^gradients/encoder/fully_connected/BiasAdd_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/BiasAdd_grad/BiasAddGrad_2"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/MatMul_3"
  op: "MatMul"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_3"
  input: "encoder/fully_connected/weights/read_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/MatMul_1_2"
  op: "MatMul"
  input: "encoder/sub_3"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/tuple/group_deps_2"
  op: "NoOp"
  input: "^gradients/encoder/fully_connected/MatMul_grad/MatMul_1_2"
  input: "^gradients/encoder/fully_connected/MatMul_grad/MatMul_3"
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/encoder/fully_connected/MatMul_grad/MatMul_3"
  input: "^gradients/encoder/fully_connected/MatMul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/MatMul_grad/MatMul_3"
      }
    }
  }
}
node {
  name: "gradients/encoder/fully_connected/MatMul_grad/tuple/control_dependency_1_2"
  op: "Identity"
  input: "gradients/encoder/fully_connected/MatMul_grad/MatMul_1_2"
  input: "^gradients/encoder/fully_connected/MatMul_grad/tuple/group_deps_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/encoder/fully_connected/MatMul_grad/MatMul_1_2"
      }
    }
  }
}
node {
  name: "beta1_power/initial_value_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "beta1_power_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign_2"
  op: "Assign"
  input: "beta1_power_2"
  input: "beta1_power/initial_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read_2"
  op: "Identity"
  input: "beta1_power_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign_2"
  op: "Assign"
  input: "beta2_power_2"
  input: "beta2_power/initial_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read_2"
  op: "Identity"
  input: "beta2_power_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Initializer/zeros/shape_as_tensor_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Initializer/zeros/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Initializer/zeros_2"
  op: "Fill"
  input: "encoder/fully_connected/weights/Adam/Initializer/zeros/shape_as_tensor_2"
  input: "encoder/fully_connected/weights/Adam/Initializer/zeros/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_3"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected/weights/Adam_3"
  input: "encoder/fully_connected/weights/Adam/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam/read_2"
  op: "Identity"
  input: "encoder/fully_connected/weights/Adam_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/shape_as_tensor_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Initializer/zeros_2"
  op: "Fill"
  input: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/shape_as_tensor_2"
  input: "encoder/fully_connected/weights/Adam_1/Initializer/zeros/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected/weights/Adam_1_2"
  input: "encoder/fully_connected/weights/Adam_1/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/weights/Adam_1/read_2"
  op: "Identity"
  input: "encoder/fully_connected/weights/Adam_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_3"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected/biases/Adam_3"
  input: "encoder/fully_connected/biases/Adam/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam/read_2"
  op: "Identity"
  input: "encoder/fully_connected/biases/Adam_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected/biases/Adam_1_2"
  input: "encoder/fully_connected/biases/Adam_1/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected/biases/Adam_1/read_2"
  op: "Identity"
  input: "encoder/fully_connected/biases/Adam_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/shape_as_tensor_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Initializer/zeros_2"
  op: "Fill"
  input: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/shape_as_tensor_2"
  input: "encoder/fully_connected_1/weights/Adam/Initializer/zeros/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_3"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/Adam_3"
  input: "encoder/fully_connected_1/weights/Adam/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam/read_2"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/Adam_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/shape_as_tensor_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros_2"
  op: "Fill"
  input: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/shape_as_tensor_2"
  input: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_1/weights/Adam_1_2"
  input: "encoder/fully_connected_1/weights/Adam_1/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/weights/Adam_1/read_2"
  op: "Identity"
  input: "encoder/fully_connected_1/weights/Adam_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_3"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/Adam_3"
  input: "encoder/fully_connected_1/biases/Adam/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam/read_2"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/Adam_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_1/biases/Adam_1_2"
  input: "encoder/fully_connected_1/biases/Adam_1/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_1/biases/Adam_1/read_2"
  op: "Identity"
  input: "encoder/fully_connected_1/biases/Adam_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/shape_as_tensor_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Initializer/zeros_2"
  op: "Fill"
  input: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/shape_as_tensor_2"
  input: "encoder/fully_connected_2/weights/Adam/Initializer/zeros/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_3"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/Adam_3"
  input: "encoder/fully_connected_2/weights/Adam/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam/read_2"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/Adam_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/shape_as_tensor_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros_2"
  op: "Fill"
  input: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/shape_as_tensor_2"
  input: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_2/weights/Adam_1_2"
  input: "encoder/fully_connected_2/weights/Adam_1/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/weights/Adam_1/read_2"
  op: "Identity"
  input: "encoder/fully_connected_2/weights/Adam_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_3"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/Adam_3"
  input: "encoder/fully_connected_2/biases/Adam/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam/read_2"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/Adam_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1/Assign_2"
  op: "Assign"
  input: "encoder/fully_connected_2/biases/Adam_1_2"
  input: "encoder/fully_connected_2/biases/Adam_1/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/fully_connected_2/biases/Adam_1/read_2"
  op: "Identity"
  input: "encoder/fully_connected_2/biases/Adam_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_3"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam/Assign_2"
  op: "Assign"
  input: "decoder/fully_connected/weights/Adam_3"
  input: "decoder/fully_connected/weights/Adam/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam/read_2"
  op: "Identity"
  input: "decoder/fully_connected/weights/Adam_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1/Assign_2"
  op: "Assign"
  input: "decoder/fully_connected/weights/Adam_1_2"
  input: "decoder/fully_connected/weights/Adam_1/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/weights/Adam_1/read_2"
  op: "Identity"
  input: "decoder/fully_connected/weights/Adam_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_3"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam/Assign_2"
  op: "Assign"
  input: "decoder/fully_connected/biases/Adam_3"
  input: "decoder/fully_connected/biases/Adam/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam/read_2"
  op: "Identity"
  input: "decoder/fully_connected/biases/Adam_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1/Initializer/zeros_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1_2"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1/Assign_2"
  op: "Assign"
  input: "decoder/fully_connected/biases/Adam_1_2"
  input: "decoder/fully_connected/biases/Adam_1/Initializer/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/fully_connected/biases/Adam_1/read_2"
  op: "Identity"
  input: "decoder/fully_connected/biases/Adam_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "Adam/beta1_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "Adam/beta2_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected/weights/ApplyAdam_2"
  op: "ApplyAdam"
  input: "encoder/fully_connected/weights_2"
  input: "encoder/fully_connected/weights/Adam_3"
  input: "encoder/fully_connected/weights/Adam_1_2"
  input: "beta1_power/read_2"
  input: "beta2_power/read_2"
  input: "ExponentialDecay_2"
  input: "Adam/beta1_2"
  input: "Adam/beta2_2"
  input: "Adam/epsilon_2"
  input: "gradients/encoder/fully_connected/MatMul_grad/tuple/control_dependency_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected/biases/ApplyAdam_2"
  op: "ApplyAdam"
  input: "encoder/fully_connected/biases_2"
  input: "encoder/fully_connected/biases/Adam_3"
  input: "encoder/fully_connected/biases/Adam_1_2"
  input: "beta1_power/read_2"
  input: "beta2_power/read_2"
  input: "ExponentialDecay_2"
  input: "Adam/beta1_2"
  input: "Adam/beta2_2"
  input: "Adam/epsilon_2"
  input: "gradients/encoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_1/weights/ApplyAdam_2"
  op: "ApplyAdam"
  input: "encoder/fully_connected_1/weights_2"
  input: "encoder/fully_connected_1/weights/Adam_3"
  input: "encoder/fully_connected_1/weights/Adam_1_2"
  input: "beta1_power/read_2"
  input: "beta2_power/read_2"
  input: "ExponentialDecay_2"
  input: "Adam/beta1_2"
  input: "Adam/beta2_2"
  input: "Adam/epsilon_2"
  input: "gradients/encoder/fully_connected_1/MatMul_grad/tuple/control_dependency_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_1/biases/ApplyAdam_2"
  op: "ApplyAdam"
  input: "encoder/fully_connected_1/biases_2"
  input: "encoder/fully_connected_1/biases/Adam_3"
  input: "encoder/fully_connected_1/biases/Adam_1_2"
  input: "beta1_power/read_2"
  input: "beta2_power/read_2"
  input: "ExponentialDecay_2"
  input: "Adam/beta1_2"
  input: "Adam/beta2_2"
  input: "Adam/epsilon_2"
  input: "gradients/encoder/fully_connected_1/BiasAdd_grad/tuple/control_dependency_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_1/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_2/weights/ApplyAdam_2"
  op: "ApplyAdam"
  input: "encoder/fully_connected_2/weights_2"
  input: "encoder/fully_connected_2/weights/Adam_3"
  input: "encoder/fully_connected_2/weights/Adam_1_2"
  input: "beta1_power/read_2"
  input: "beta2_power/read_2"
  input: "ExponentialDecay_2"
  input: "Adam/beta1_2"
  input: "Adam/beta2_2"
  input: "Adam/epsilon_2"
  input: "gradients/encoder/fully_connected_2/MatMul_grad/tuple/control_dependency_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_encoder/fully_connected_2/biases/ApplyAdam_2"
  op: "ApplyAdam"
  input: "encoder/fully_connected_2/biases_2"
  input: "encoder/fully_connected_2/biases/Adam_3"
  input: "encoder/fully_connected_2/biases/Adam_1_2"
  input: "beta1_power/read_2"
  input: "beta2_power/read_2"
  input: "ExponentialDecay_2"
  input: "Adam/beta1_2"
  input: "Adam/beta2_2"
  input: "Adam/epsilon_2"
  input: "gradients/encoder/fully_connected_2/BiasAdd_grad/tuple/control_dependency_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/fully_connected_2/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/fully_connected/weights/ApplyAdam_2"
  op: "ApplyAdam"
  input: "decoder/fully_connected/weights_2"
  input: "decoder/fully_connected/weights/Adam_3"
  input: "decoder/fully_connected/weights/Adam_1_2"
  input: "beta1_power/read_2"
  input: "beta2_power/read_2"
  input: "ExponentialDecay_2"
  input: "Adam/beta1_2"
  input: "Adam/beta2_2"
  input: "Adam/epsilon_2"
  input: "gradients/decoder/fully_connected/MatMul_grad/tuple/control_dependency_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/weights_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_decoder/fully_connected/biases/ApplyAdam_2"
  op: "ApplyAdam"
  input: "decoder/fully_connected/biases_2"
  input: "decoder/fully_connected/biases/Adam_3"
  input: "decoder/fully_connected/biases/Adam_1_2"
  input: "beta1_power/read_2"
  input: "beta2_power/read_2"
  input: "ExponentialDecay_2"
  input: "Adam/beta1_2"
  input: "Adam/beta2_2"
  input: "Adam/epsilon_2"
  input: "gradients/decoder/fully_connected/BiasAdd_grad/tuple/control_dependency_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul_3"
  op: "Mul"
  input: "beta1_power/read_2"
  input: "Adam/beta1_2"
  input: "^Adam/update_decoder/fully_connected/biases/ApplyAdam_2"
  input: "^Adam/update_decoder/fully_connected/weights/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected/biases/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected/weights/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_1/biases/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_1/weights/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_2/biases/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_2/weights/ApplyAdam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "Adam/Assign_3"
  op: "Assign"
  input: "beta1_power_2"
  input: "Adam/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1_2"
  op: "Mul"
  input: "beta2_power/read_2"
  input: "Adam/beta2_2"
  input: "^Adam/update_decoder/fully_connected/biases/ApplyAdam_2"
  input: "^Adam/update_decoder/fully_connected/weights/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected/biases/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected/weights/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_1/biases/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_1/weights/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_2/biases/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_2/weights/ApplyAdam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
}
node {
  name: "Adam/Assign_1_2"
  op: "Assign"
  input: "beta2_power_2"
  input: "Adam/mul_1_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/fully_connected/biases_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update_2"
  op: "NoOp"
  input: "^Adam/Assign_1_2"
  input: "^Adam/Assign_3"
  input: "^Adam/update_decoder/fully_connected/biases/ApplyAdam_2"
  input: "^Adam/update_decoder/fully_connected/weights/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected/biases/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected/weights/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_1/biases/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_1/weights/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_2/biases/ApplyAdam_2"
  input: "^Adam/update_encoder/fully_connected_2/weights/ApplyAdam_2"
}
node {
  name: "Adam/value_2"
  op: "Const"
  input: "^Adam/update_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam_2"
  op: "AssignAdd"
  input: "global_step_2"
  input: "Adam/value_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/CheckNumerics_2"
  op: "CheckNumerics"
  input: "control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "message"
    value {
      s: "LossTensor is inf or nan"
    }
  }
}
node {
  name: "train_op/control_dependency_2"
  op: "Identity"
  input: "train_op/CheckNumerics_2"
  input: "^Adam_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/CheckNumerics_2"
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^beta1_power/Assign_2"
  input: "^beta2_power/Assign_2"
  input: "^decoder/fully_connected/biases/Adam/Assign_2"
  input: "^decoder/fully_connected/biases/Adam_1/Assign_2"
  input: "^decoder/fully_connected/biases/Assign_2"
  input: "^decoder/fully_connected/biases/ExponentialMovingAverage/Assign_2"
  input: "^decoder/fully_connected/weights/Adam/Assign_2"
  input: "^decoder/fully_connected/weights/Adam_1/Assign_2"
  input: "^decoder/fully_connected/weights/Assign_2"
  input: "^decoder/fully_connected/weights/ExponentialMovingAverage/Assign_2"
  input: "^encoder/fully_connected/biases/Adam/Assign_2"
  input: "^encoder/fully_connected/biases/Adam_1/Assign_2"
  input: "^encoder/fully_connected/biases/Assign_2"
  input: "^encoder/fully_connected/biases/ExponentialMovingAverage/Assign_2"
  input: "^encoder/fully_connected/weights/Adam/Assign_2"
  input: "^encoder/fully_connected/weights/Adam_1/Assign_2"
  input: "^encoder/fully_connected/weights/Assign_2"
  input: "^encoder/fully_connected/weights/ExponentialMovingAverage/Assign_2"
  input: "^encoder/fully_connected_1/biases/Adam/Assign_2"
  input: "^encoder/fully_connected_1/biases/Adam_1/Assign_2"
  input: "^encoder/fully_connected_1/biases/Assign_2"
  input: "^encoder/fully_connected_1/biases/ExponentialMovingAverage/Assign_2"
  input: "^encoder/fully_connected_1/weights/Adam/Assign_2"
  input: "^encoder/fully_connected_1/weights/Adam_1/Assign_2"
  input: "^encoder/fully_connected_1/weights/Assign_2"
  input: "^encoder/fully_connected_1/weights/ExponentialMovingAverage/Assign_2"
  input: "^encoder/fully_connected_2/biases/Adam/Assign_2"
  input: "^encoder/fully_connected_2/biases/Adam_1/Assign_2"
  input: "^encoder/fully_connected_2/biases/Assign_2"
  input: "^encoder/fully_connected_2/biases/ExponentialMovingAverage/Assign_2"
  input: "^encoder/fully_connected_2/weights/Adam/Assign_2"
  input: "^encoder/fully_connected_2/weights/Adam_1/Assign_2"
  input: "^encoder/fully_connected_2/weights/Assign_2"
  input: "^encoder/fully_connected_2/weights/ExponentialMovingAverage/Assign_2"
  input: "^global_step/Assign_2"
}
versions {
  producer: 27
}
